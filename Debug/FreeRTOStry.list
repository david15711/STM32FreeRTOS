
FreeRTOStry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fdc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080070ec  080070ec  000080ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007270  08007270  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007270  08007270  00009060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007270  08007270  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007270  08007270  00008270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007274  08007274  00008274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007278  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e10  20000060  080072d8  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e70  080072d8  00009e70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf0a  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004483  00000000  00000000  00024f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  00029418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000125b  00000000  00000000  0002abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c579  00000000  00000000  0002be3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d3b8  00000000  00000000  000483b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a92e  00000000  00000000  0006576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010009a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064dc  00000000  00000000  001000e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001065bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080070d4 	.word	0x080070d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080070d4 	.word	0x080070d4

08000150 <apInit>:
void StartDefaultTask(void *argument);
void StartTask02(void *argument);
void StartTask03(void *argument);

void apInit(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	uartOpen(_DEF_UART2, 115200);
 8000154:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000158:	2000      	movs	r0, #0
 800015a:	f000 fd5b 	bl	8000c14 <uartOpen>
	ultrasonicInit();
 800015e:	f000 fddf 	bl	8000d20 <ultrasonicInit>
	osKernelInitialize();
 8000162:	f003 ff09 	bl	8003f78 <osKernelInitialize>
	myUARTSem01Handle = osSemaphoreNew(1, 1, &myUARTSem01_attributes);
 8000166:	4a20      	ldr	r2, [pc, #128]	@ (80001e8 <apInit+0x98>)
 8000168:	2101      	movs	r1, #1
 800016a:	2001      	movs	r0, #1
 800016c:	f004 f838 	bl	80041e0 <osSemaphoreNew>
 8000170:	4603      	mov	r3, r0
 8000172:	4a1e      	ldr	r2, [pc, #120]	@ (80001ec <apInit+0x9c>)
 8000174:	6013      	str	r3, [r2, #0]
	myIPCQueue01Handle = osMessageQueueNew (8, 8, &myIPCQueue01_attributes);
 8000176:	4a1e      	ldr	r2, [pc, #120]	@ (80001f0 <apInit+0xa0>)
 8000178:	2108      	movs	r1, #8
 800017a:	2008      	movs	r0, #8
 800017c:	f004 f8b9 	bl	80042f2 <osMessageQueueNew>
 8000180:	4603      	mov	r3, r0
 8000182:	4a1c      	ldr	r2, [pc, #112]	@ (80001f4 <apInit+0xa4>)
 8000184:	6013      	str	r3, [r2, #0]
	myIPCQueue02Handle = osMessageQueueNew (8, 8, &myIPCQueue02_attributes);
 8000186:	4a1c      	ldr	r2, [pc, #112]	@ (80001f8 <apInit+0xa8>)
 8000188:	2108      	movs	r1, #8
 800018a:	2008      	movs	r0, #8
 800018c:	f004 f8b1 	bl	80042f2 <osMessageQueueNew>
 8000190:	4603      	mov	r3, r0
 8000192:	4a1a      	ldr	r2, [pc, #104]	@ (80001fc <apInit+0xac>)
 8000194:	6013      	str	r3, [r2, #0]
	myIPCQueue03Handle = osMessageQueueNew (8, 8, &myIPCQueue03_attributes);
 8000196:	4a1a      	ldr	r2, [pc, #104]	@ (8000200 <apInit+0xb0>)
 8000198:	2108      	movs	r1, #8
 800019a:	2008      	movs	r0, #8
 800019c:	f004 f8a9 	bl	80042f2 <osMessageQueueNew>
 80001a0:	4603      	mov	r3, r0
 80001a2:	4a18      	ldr	r2, [pc, #96]	@ (8000204 <apInit+0xb4>)
 80001a4:	6013      	str	r3, [r2, #0]
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001a6:	4a18      	ldr	r2, [pc, #96]	@ (8000208 <apInit+0xb8>)
 80001a8:	2100      	movs	r1, #0
 80001aa:	4818      	ldr	r0, [pc, #96]	@ (800020c <apInit+0xbc>)
 80001ac:	f003 ff2c 	bl	8004008 <osThreadNew>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4a17      	ldr	r2, [pc, #92]	@ (8000210 <apInit+0xc0>)
 80001b4:	6013      	str	r3, [r2, #0]
	myUARTTaskHandle = osThreadNew(StartTask02, NULL, &myUARTTask_attributes);
 80001b6:	4a17      	ldr	r2, [pc, #92]	@ (8000214 <apInit+0xc4>)
 80001b8:	2100      	movs	r1, #0
 80001ba:	4817      	ldr	r0, [pc, #92]	@ (8000218 <apInit+0xc8>)
 80001bc:	f003 ff24 	bl	8004008 <osThreadNew>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4a16      	ldr	r2, [pc, #88]	@ (800021c <apInit+0xcc>)
 80001c4:	6013      	str	r3, [r2, #0]
	myIOTaskHandle = osThreadNew(StartTask03, NULL, &myIOTask_attributes);
 80001c6:	4a16      	ldr	r2, [pc, #88]	@ (8000220 <apInit+0xd0>)
 80001c8:	2100      	movs	r1, #0
 80001ca:	4816      	ldr	r0, [pc, #88]	@ (8000224 <apInit+0xd4>)
 80001cc:	f003 ff1c 	bl	8004008 <osThreadNew>
 80001d0:	4603      	mov	r3, r0
 80001d2:	4a15      	ldr	r2, [pc, #84]	@ (8000228 <apInit+0xd8>)
 80001d4:	6013      	str	r3, [r2, #0]
	myICEvent01Handle = osEventFlagsNew(&myICEvent01_attributes);
 80001d6:	4815      	ldr	r0, [pc, #84]	@ (800022c <apInit+0xdc>)
 80001d8:	f003 ffc3 	bl	8004162 <osEventFlagsNew>
 80001dc:	4603      	mov	r3, r0
 80001de:	4a14      	ldr	r2, [pc, #80]	@ (8000230 <apInit+0xe0>)
 80001e0:	6013      	str	r3, [r2, #0]

}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	08007224 	.word	0x08007224
 80001ec:	20000094 	.word	0x20000094
 80001f0:	080071dc 	.word	0x080071dc
 80001f4:	20000088 	.word	0x20000088
 80001f8:	080071f4 	.word	0x080071f4
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	0800720c 	.word	0x0800720c
 8000204:	20000090 	.word	0x20000090
 8000208:	08007170 	.word	0x08007170
 800020c:	08000241 	.word	0x08000241
 8000210:	2000007c 	.word	0x2000007c
 8000214:	08007194 	.word	0x08007194
 8000218:	08000251 	.word	0x08000251
 800021c:	20000080 	.word	0x20000080
 8000220:	080071b8 	.word	0x080071b8
 8000224:	08000261 	.word	0x08000261
 8000228:	20000084 	.word	0x20000084
 800022c:	08007234 	.word	0x08007234
 8000230:	20000098 	.word	0x20000098

08000234 <apMain>:

void apMain(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	  osKernelStart();
 8000238:	f003 fec0 	bl	8003fbc <osKernelStart>
	  while(1)
 800023c:	bf00      	nop
 800023e:	e7fd      	b.n	800023c <apMain+0x8>

08000240 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000248:	2001      	movs	r0, #1
 800024a:	f003 ff6f 	bl	800412c <osDelay>
 800024e:	e7fb      	b.n	8000248 <StartDefaultTask+0x8>

08000250 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f003 ff67 	bl	800412c <osDelay>
 800025e:	e7fb      	b.n	8000258 <StartTask02+0x8>

08000260 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000268:	2001      	movs	r0, #1
 800026a:	f003 ff5f 	bl	800412c <osDelay>
 800026e:	e7fb      	b.n	8000268 <StartTask03+0x8>

08000270 <bspInit>:

void SystemClock_Config(void);
void Error_Handler(void);

void bspInit(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	HAL_Init();
 8000274:	f000 fd86 	bl	8000d84 <HAL_Init>
	SystemClock_Config();
 8000278:	f000 f802 	bl	8000280 <SystemClock_Config>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b094      	sub	sp, #80	@ 0x50
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800028a:	2228      	movs	r2, #40	@ 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f006 fe32 	bl	8006ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	f107 0314 	add.w	r3, r7, #20
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	2302      	movs	r3, #2
 80002b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b8:	2310      	movs	r3, #16
 80002ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002bc:	2302      	movs	r3, #2
 80002be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002c0:	2300      	movs	r3, #0
 80002c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002c4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fcf8 	bl	8001cc4 <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002da:	f000 f839 	bl	8000350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	2302      	movs	r3, #2
 80002e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80002e6:	2390      	movs	r3, #144	@ 0x90
 80002e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f4:	f107 0314 	add.w	r3, r7, #20
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 ff64 	bl	80021c8 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000306:	f000 f823 	bl	8000350 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800030a:	2302      	movs	r3, #2
 800030c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f002 f915 	bl	8002544 <HAL_RCCEx_PeriphCLKConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000320:	f000 f816 	bl	8000350 <Error_Handler>
  }
}
 8000324:	bf00      	nop
 8000326:	3750      	adds	r7, #80	@ 0x50
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a04      	ldr	r2, [pc, #16]	@ (800034c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d101      	bne.n	8000342 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800033e:	f000 fd37 	bl	8000db0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40000400 	.word	0x40000400

08000350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000354:	b672      	cpsid	i
}
 8000356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <Error_Handler+0x8>

0800035c <hwInit>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;
TIM_HandleTypeDef htim1;

void hwInit(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	bspInit();
 8000360:	f7ff ff86 	bl	8000270 <bspInit>
	MX_DMA_Init();
 8000364:	f000 f858 	bl	8000418 <MX_DMA_Init>
	MX_ADC1_Init();
 8000368:	f000 f808 	bl	800037c <MX_ADC1_Init>
	MX_TIM1_Init();
 800036c:	f000 f8e8 	bl	8000540 <MX_TIM1_Init>
	uartInit();
 8000370:	f000 fc36 	bl	8000be0 <uartInit>
	MX_GPIO_Init();
 8000374:	f000 f876 	bl	8000464 <MX_GPIO_Init>
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}

0800037c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
  hadc1.Instance = ADC1;
 800038c:	4b20      	ldr	r3, [pc, #128]	@ (8000410 <MX_ADC1_Init+0x94>)
 800038e:	4a21      	ldr	r2, [pc, #132]	@ (8000414 <MX_ADC1_Init+0x98>)
 8000390:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000392:	4b1f      	ldr	r3, [pc, #124]	@ (8000410 <MX_ADC1_Init+0x94>)
 8000394:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000398:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800039a:	4b1d      	ldr	r3, [pc, #116]	@ (8000410 <MX_ADC1_Init+0x94>)
 800039c:	2200      	movs	r2, #0
 800039e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000410 <MX_ADC1_Init+0x94>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000410 <MX_ADC1_Init+0x94>)
 80003a8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ae:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <MX_ADC1_Init+0x94>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80003b4:	4b16      	ldr	r3, [pc, #88]	@ (8000410 <MX_ADC1_Init+0x94>)
 80003b6:	2202      	movs	r2, #2
 80003b8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003ba:	4815      	ldr	r0, [pc, #84]	@ (8000410 <MX_ADC1_Init+0x94>)
 80003bc:	f000 fd14 	bl	8000de8 <HAL_ADC_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003c6:	f7ff ffc3 	bl	8000350 <Error_Handler>
  }
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80003ca:	2310      	movs	r3, #16
 80003cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ce:	2301      	movs	r3, #1
 80003d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	4619      	mov	r1, r3
 80003da:	480d      	ldr	r0, [pc, #52]	@ (8000410 <MX_ADC1_Init+0x94>)
 80003dc:	f000 fea4 	bl	8001128 <HAL_ADC_ConfigChannel>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003e6:	f7ff ffb3 	bl	8000350 <Error_Handler>
  }
  sConfig.Channel = ADC_CHANNEL_10;
 80003ea:	230a      	movs	r3, #10
 80003ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003ee:	2302      	movs	r3, #2
 80003f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4619      	mov	r1, r3
 80003f6:	4806      	ldr	r0, [pc, #24]	@ (8000410 <MX_ADC1_Init+0x94>)
 80003f8:	f000 fe96 	bl	8001128 <HAL_ADC_ConfigChannel>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000402:	f7ff ffa5 	bl	8000350 <Error_Handler>
  }
}
 8000406:	bf00      	nop
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000009c 	.word	0x2000009c
 8000414:	40012400 	.word	0x40012400

08000418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800041e:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <MX_DMA_Init+0x48>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a0f      	ldr	r2, [pc, #60]	@ (8000460 <MX_DMA_Init+0x48>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <MX_DMA_Init+0x48>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000436:	2200      	movs	r2, #0
 8000438:	2105      	movs	r1, #5
 800043a:	200b      	movs	r0, #11
 800043c:	f001 f86b 	bl	8001516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000440:	200b      	movs	r0, #11
 8000442:	f001 f884 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2105      	movs	r1, #5
 800044a:	2010      	movs	r0, #16
 800044c:	f001 f863 	bl	8001516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000450:	2010      	movs	r0, #16
 8000452:	f001 f87c 	bl	800154e <HAL_NVIC_EnableIRQ>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000478:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <MX_GPIO_Init+0xcc>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a2c      	ldr	r2, [pc, #176]	@ (8000530 <MX_GPIO_Init+0xcc>)
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b2a      	ldr	r3, [pc, #168]	@ (8000530 <MX_GPIO_Init+0xcc>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000490:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <MX_GPIO_Init+0xcc>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a26      	ldr	r2, [pc, #152]	@ (8000530 <MX_GPIO_Init+0xcc>)
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b24      	ldr	r3, [pc, #144]	@ (8000530 <MX_GPIO_Init+0xcc>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0320 	and.w	r3, r3, #32
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b21      	ldr	r3, [pc, #132]	@ (8000530 <MX_GPIO_Init+0xcc>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a20      	ldr	r2, [pc, #128]	@ (8000530 <MX_GPIO_Init+0xcc>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000530 <MX_GPIO_Init+0xcc>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000530 <MX_GPIO_Init+0xcc>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000530 <MX_GPIO_Init+0xcc>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <MX_GPIO_Init+0xcc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2120      	movs	r1, #32
 80004dc:	4815      	ldr	r0, [pc, #84]	@ (8000534 <MX_GPIO_Init+0xd0>)
 80004de:	f001 fbb7 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004e8:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <MX_GPIO_Init+0xd4>)
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	4811      	ldr	r0, [pc, #68]	@ (800053c <MX_GPIO_Init+0xd8>)
 80004f8:	f001 fa26 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004fc:	2320      	movs	r3, #32
 80004fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	2301      	movs	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2302      	movs	r3, #2
 800050a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	4808      	ldr	r0, [pc, #32]	@ (8000534 <MX_GPIO_Init+0xd0>)
 8000514:	f001 fa18 	bl	8001948 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2105      	movs	r1, #5
 800051c:	2028      	movs	r0, #40	@ 0x28
 800051e:	f000 fffa 	bl	8001516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000522:	2028      	movs	r0, #40	@ 0x28
 8000524:	f001 f813 	bl	800154e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000528:	bf00      	nop
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40021000 	.word	0x40021000
 8000534:	40010800 	.word	0x40010800
 8000538:	10110000 	.word	0x10110000
 800053c:	40011000 	.word	0x40011000

08000540 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b09a      	sub	sp, #104	@ 0x68
 8000544:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000546:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000554:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800055e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2220      	movs	r2, #32
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 fcb6 	bl	8006ef8 <memset>
  htim1.Instance = TIM1;
 800058c:	4b52      	ldr	r3, [pc, #328]	@ (80006d8 <MX_TIM1_Init+0x198>)
 800058e:	4a53      	ldr	r2, [pc, #332]	@ (80006dc <MX_TIM1_Init+0x19c>)
 8000590:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000592:	4b51      	ldr	r3, [pc, #324]	@ (80006d8 <MX_TIM1_Init+0x198>)
 8000594:	2207      	movs	r2, #7
 8000596:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000598:	4b4f      	ldr	r3, [pc, #316]	@ (80006d8 <MX_TIM1_Init+0x198>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 800059e:	4b4e      	ldr	r3, [pc, #312]	@ (80006d8 <MX_TIM1_Init+0x198>)
 80005a0:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80005a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a6:	4b4c      	ldr	r3, [pc, #304]	@ (80006d8 <MX_TIM1_Init+0x198>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005ac:	4b4a      	ldr	r3, [pc, #296]	@ (80006d8 <MX_TIM1_Init+0x198>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b2:	4b49      	ldr	r3, [pc, #292]	@ (80006d8 <MX_TIM1_Init+0x198>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005b8:	4847      	ldr	r0, [pc, #284]	@ (80006d8 <MX_TIM1_Init+0x198>)
 80005ba:	f002 f879 	bl	80026b0 <HAL_TIM_Base_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80005c4:	f7ff fec4 	bl	8000350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005d2:	4619      	mov	r1, r3
 80005d4:	4840      	ldr	r0, [pc, #256]	@ (80006d8 <MX_TIM1_Init+0x198>)
 80005d6:	f002 fc0b 	bl	8002df0 <HAL_TIM_ConfigClockSource>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80005e0:	f7ff feb6 	bl	8000350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005e4:	483c      	ldr	r0, [pc, #240]	@ (80006d8 <MX_TIM1_Init+0x198>)
 80005e6:	f002 f905 	bl	80027f4 <HAL_TIM_PWM_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80005f0:	f7ff feae 	bl	8000350 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80005f4:	4838      	ldr	r0, [pc, #224]	@ (80006d8 <MX_TIM1_Init+0x198>)
 80005f6:	f002 f955 	bl	80028a4 <HAL_TIM_IC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000600:	f7ff fea6 	bl	8000350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000604:	2300      	movs	r3, #0
 8000606:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800060c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000610:	4619      	mov	r1, r3
 8000612:	4831      	ldr	r0, [pc, #196]	@ (80006d8 <MX_TIM1_Init+0x198>)
 8000614:	f003 f872 	bl	80036fc <HAL_TIMEx_MasterConfigSynchronization>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 800061e:	f7ff fe97 	bl	8000350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000622:	2360      	movs	r3, #96	@ 0x60
 8000624:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 10;
 8000626:	230a      	movs	r3, #10
 8000628:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800062a:	2300      	movs	r3, #0
 800062c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800062e:	2300      	movs	r3, #0
 8000630:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000636:	2300      	movs	r3, #0
 8000638:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800063a:	2300      	movs	r3, #0
 800063c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800063e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	4824      	ldr	r0, [pc, #144]	@ (80006d8 <MX_TIM1_Init+0x198>)
 8000648:	f002 fb10 	bl	8002c6c <HAL_TIM_PWM_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000652:	f7ff fe7d 	bl	8000350 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800065a:	2301      	movs	r3, #1
 800065c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigIC.ICFilter = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066a:	2204      	movs	r2, #4
 800066c:	4619      	mov	r1, r3
 800066e:	481a      	ldr	r0, [pc, #104]	@ (80006d8 <MX_TIM1_Init+0x198>)
 8000670:	f002 fa60 	bl	8002b34 <HAL_TIM_IC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800067a:	f7ff fe69 	bl	8000350 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800067e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000682:	2208      	movs	r2, #8
 8000684:	4619      	mov	r1, r3
 8000686:	4814      	ldr	r0, [pc, #80]	@ (80006d8 <MX_TIM1_Init+0x198>)
 8000688:	f002 fa54 	bl	8002b34 <HAL_TIM_IC_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8000692:	f7ff fe5d 	bl	8000350 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4619      	mov	r1, r3
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <MX_TIM1_Init+0x198>)
 80006ba:	f003 f87d 	bl	80037b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80006c4:	f7ff fe44 	bl	8000350 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80006c8:	4803      	ldr	r0, [pc, #12]	@ (80006d8 <MX_TIM1_Init+0x198>)
 80006ca:	f000 f91f 	bl	800090c <HAL_TIM_MspPostInit>
}
 80006ce:	bf00      	nop
 80006d0:	3768      	adds	r7, #104	@ 0x68
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000110 	.word	0x20000110
 80006dc:	40012c00 	.word	0x40012c00

080006e0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	;
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  /* USER CODE BEGIN Init */
  hwInit();
 80006f6:	f7ff fe31 	bl	800035c <hwInit>
  apInit();
 80006fa:	f7ff fd29 	bl	8000150 <apInit>
  apMain();
 80006fe:	f7ff fd99 	bl	8000234 <apMain>
  /* Init scheduler */
  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000702:	bf00      	nop
 8000704:	e7fd      	b.n	8000702 <main+0x10>

08000706 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000706:	b480      	push	{r7}
 8000708:	b087      	sub	sp, #28
 800070a:	af00      	add	r7, sp, #0
 800070c:	60f8      	str	r0, [r7, #12]
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000712:	2301      	movs	r3, #1
 8000714:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	60da      	str	r2, [r3, #12]

  return ret;
 800072e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000730:	4618      	mov	r0, r3
 8000732:	371c      	adds	r7, #28
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
	...

0800073c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <HAL_MspInit+0x68>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a17      	ldr	r2, [pc, #92]	@ (80007a4 <HAL_MspInit+0x68>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <HAL_MspInit+0x68>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_MspInit+0x68>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a11      	ldr	r2, [pc, #68]	@ (80007a4 <HAL_MspInit+0x68>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <HAL_MspInit+0x68>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	210f      	movs	r1, #15
 8000776:	f06f 0001 	mvn.w	r0, #1
 800077a:	f000 fecc 	bl	8001516 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077e:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <HAL_MspInit+0x6c>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <HAL_MspInit+0x6c>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010000 	.word	0x40010000

080007ac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000878 <HAL_ADC_MspInit+0xcc>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d151      	bne.n	8000870 <HAL_ADC_MspInit+0xc4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007cc:	4b2b      	ldr	r3, [pc, #172]	@ (800087c <HAL_ADC_MspInit+0xd0>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a2a      	ldr	r2, [pc, #168]	@ (800087c <HAL_ADC_MspInit+0xd0>)
 80007d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b28      	ldr	r3, [pc, #160]	@ (800087c <HAL_ADC_MspInit+0xd0>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e4:	4b25      	ldr	r3, [pc, #148]	@ (800087c <HAL_ADC_MspInit+0xd0>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a24      	ldr	r2, [pc, #144]	@ (800087c <HAL_ADC_MspInit+0xd0>)
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b22      	ldr	r3, [pc, #136]	@ (800087c <HAL_ADC_MspInit+0xd0>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0310 	and.w	r3, r3, #16
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007fc:	2301      	movs	r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000800:	2303      	movs	r3, #3
 8000802:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	4619      	mov	r1, r3
 800080a:	481d      	ldr	r0, [pc, #116]	@ (8000880 <HAL_ADC_MspInit+0xd4>)
 800080c:	f001 f89c 	bl	8001948 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <HAL_ADC_MspInit+0xd8>)
 8000812:	4a1d      	ldr	r2, [pc, #116]	@ (8000888 <HAL_ADC_MspInit+0xdc>)
 8000814:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <HAL_ADC_MspInit+0xd8>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <HAL_ADC_MspInit+0xd8>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000822:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <HAL_ADC_MspInit+0xd8>)
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <HAL_ADC_MspInit+0xd8>)
 800082a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800082e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <HAL_ADC_MspInit+0xd8>)
 8000832:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000836:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_ADC_MspInit+0xd8>)
 800083a:	2220      	movs	r2, #32
 800083c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <HAL_ADC_MspInit+0xd8>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000844:	480f      	ldr	r0, [pc, #60]	@ (8000884 <HAL_ADC_MspInit+0xd8>)
 8000846:	f000 fe91 	bl	800156c <HAL_DMA_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000850:	f7ff fd7e 	bl	8000350 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a0b      	ldr	r2, [pc, #44]	@ (8000884 <HAL_ADC_MspInit+0xd8>)
 8000858:	621a      	str	r2, [r3, #32]
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <HAL_ADC_MspInit+0xd8>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2105      	movs	r1, #5
 8000864:	2012      	movs	r0, #18
 8000866:	f000 fe56 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800086a:	2012      	movs	r0, #18
 800086c:	f000 fe6f 	bl	800154e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40012400 	.word	0x40012400
 800087c:	40021000 	.word	0x40021000
 8000880:	40011000 	.word	0x40011000
 8000884:	200000cc 	.word	0x200000cc
 8000888:	40020008 	.word	0x40020008

0800088c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a16      	ldr	r2, [pc, #88]	@ (8000900 <HAL_TIM_Base_MspInit+0x74>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d124      	bne.n	80008f6 <HAL_TIM_Base_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <HAL_TIM_Base_MspInit+0x78>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a14      	ldr	r2, [pc, #80]	@ (8000904 <HAL_TIM_Base_MspInit+0x78>)
 80008b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_TIM_Base_MspInit+0x78>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <HAL_TIM_Base_MspInit+0x78>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000904 <HAL_TIM_Base_MspInit+0x78>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <HAL_TIM_Base_MspInit+0x78>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	@ (8000908 <HAL_TIM_Base_MspInit+0x7c>)
 80008f2:	f001 f829 	bl	8001948 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008f6:	bf00      	nop
 80008f8:	3720      	adds	r7, #32
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40012c00 	.word	0x40012c00
 8000904:	40021000 	.word	0x40021000
 8000908:	40010800 	.word	0x40010800

0800090c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <HAL_TIM_MspPostInit+0x5c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d118      	bne.n	800095e <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <HAL_TIM_MspPostInit+0x60>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a0e      	ldr	r2, [pc, #56]	@ (800096c <HAL_TIM_MspPostInit+0x60>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <HAL_TIM_MspPostInit+0x60>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000944:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000948:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2302      	movs	r3, #2
 8000950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	@ (8000970 <HAL_TIM_MspPostInit+0x64>)
 800095a:	f000 fff5 	bl	8001948 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40012c00 	.word	0x40012c00
 800096c:	40021000 	.word	0x40021000
 8000970:	40010800 	.word	0x40010800

08000974 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a28      	ldr	r2, [pc, #160]	@ (8000a30 <HAL_UART_MspInit+0xbc>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d149      	bne.n	8000a28 <HAL_UART_MspInit+0xb4>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000994:	4b27      	ldr	r3, [pc, #156]	@ (8000a34 <HAL_UART_MspInit+0xc0>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	4a26      	ldr	r2, [pc, #152]	@ (8000a34 <HAL_UART_MspInit+0xc0>)
 800099a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099e:	61d3      	str	r3, [r2, #28]
 80009a0:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <HAL_UART_MspInit+0xc0>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <HAL_UART_MspInit+0xc0>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a20      	ldr	r2, [pc, #128]	@ (8000a34 <HAL_UART_MspInit+0xc0>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <HAL_UART_MspInit+0xc0>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c4:	230c      	movs	r3, #12
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4818      	ldr	r0, [pc, #96]	@ (8000a38 <HAL_UART_MspInit+0xc4>)
 80009d8:	f000 ffb6 	bl	8001948 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80009dc:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <HAL_UART_MspInit+0xc8>)
 80009de:	4a18      	ldr	r2, [pc, #96]	@ (8000a40 <HAL_UART_MspInit+0xcc>)
 80009e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e2:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <HAL_UART_MspInit+0xc8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e8:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <HAL_UART_MspInit+0xc8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009ee:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <HAL_UART_MspInit+0xc8>)
 80009f0:	2280      	movs	r2, #128	@ 0x80
 80009f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <HAL_UART_MspInit+0xc8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <HAL_UART_MspInit+0xc8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a00:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <HAL_UART_MspInit+0xc8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <HAL_UART_MspInit+0xc8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a0c:	480b      	ldr	r0, [pc, #44]	@ (8000a3c <HAL_UART_MspInit+0xc8>)
 8000a0e:	f000 fdad 	bl	800156c <HAL_DMA_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8000a18:	f7ff fc9a 	bl	8000350 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a07      	ldr	r2, [pc, #28]	@ (8000a3c <HAL_UART_MspInit+0xc8>)
 8000a20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a22:	4a06      	ldr	r2, [pc, #24]	@ (8000a3c <HAL_UART_MspInit+0xc8>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a28:	bf00      	nop
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40010800 	.word	0x40010800
 8000a3c:	200002fc 	.word	0x200002fc
 8000a40:	4002006c 	.word	0x4002006c

08000a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	@ 0x38
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000a5a:	4b34      	ldr	r3, [pc, #208]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	4a33      	ldr	r2, [pc, #204]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	61d3      	str	r3, [r2, #28]
 8000a66:	4b31      	ldr	r3, [pc, #196]	@ (8000b2c <HAL_InitTick+0xe8>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a72:	f107 0210 	add.w	r2, r7, #16
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 fd13 	bl	80024a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d103      	bne.n	8000a94 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a8c:	f001 fce4 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8000a90:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a92:	e004      	b.n	8000a9e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a94:	f001 fce0 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aa0:	4a23      	ldr	r2, [pc, #140]	@ (8000b30 <HAL_InitTick+0xec>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	0c9b      	lsrs	r3, r3, #18
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000aac:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <HAL_InitTick+0xf0>)
 8000aae:	4a22      	ldr	r2, [pc, #136]	@ (8000b38 <HAL_InitTick+0xf4>)
 8000ab0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000ab2:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <HAL_InitTick+0xf0>)
 8000ab4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ab8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000aba:	4a1e      	ldr	r2, [pc, #120]	@ (8000b34 <HAL_InitTick+0xf0>)
 8000abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000abe:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <HAL_InitTick+0xf0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <HAL_InitTick+0xf0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000acc:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <HAL_InitTick+0xf0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000ad2:	4818      	ldr	r0, [pc, #96]	@ (8000b34 <HAL_InitTick+0xf0>)
 8000ad4:	f001 fdec 	bl	80026b0 <HAL_TIM_Base_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ade:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d11b      	bne.n	8000b1e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000ae6:	4813      	ldr	r0, [pc, #76]	@ (8000b34 <HAL_InitTick+0xf0>)
 8000ae8:	f001 fe32 	bl	8002750 <HAL_TIM_Base_Start_IT>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000af2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d111      	bne.n	8000b1e <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000afa:	201d      	movs	r0, #29
 8000afc:	f000 fd27 	bl	800154e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	d808      	bhi.n	8000b18 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000b06:	2200      	movs	r2, #0
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	201d      	movs	r0, #29
 8000b0c:	f000 fd03 	bl	8001516 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b10:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <HAL_InitTick+0xf8>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e002      	b.n	8000b1e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3738      	adds	r7, #56	@ 0x38
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	431bde83 	.word	0x431bde83
 8000b34:	20000158 	.word	0x20000158
 8000b38:	40000400 	.word	0x40000400
 8000b3c:	20000004 	.word	0x20000004

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <NMI_Handler+0x4>

08000b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <MemManage_Handler+0x4>

08000b58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b78:	4802      	ldr	r0, [pc, #8]	@ (8000b84 <DMA1_Channel1_IRQHandler+0x10>)
 8000b7a:	f000 fdb1 	bl	80016e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000cc 	.word	0x200000cc

08000b88 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b8c:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <DMA1_Channel6_IRQHandler+0x10>)
 8000b8e:	f000 fda7 	bl	80016e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200002fc 	.word	0x200002fc

08000b9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <ADC1_2_IRQHandler+0x10>)
 8000ba2:	f000 f9f9 	bl	8000f98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000009c 	.word	0x2000009c

08000bb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <TIM3_IRQHandler+0x10>)
 8000bb6:	f001 fecd 	bl	8002954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000158 	.word	0x20000158

08000bc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bc8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bcc:	f001 f858 	bl	8001c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <uartInit>:

UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

bool uartInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	e007      	b.n	8000bfc <uartInit+0x1c>
  {
    is_open[i] = false;
 8000bec:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <uartInit+0x30>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	ddf4      	ble.n	8000bec <uartInit+0xc>
  }

  return true;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	200001a0 	.word	0x200001a0

08000c14 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d157      	bne.n	8000cda <uartOpen+0xc6>
  {
    case _DEF_UART2:
		huart2.Instance = USART2;
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce4 <uartOpen+0xd0>)
 8000c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8000ce8 <uartOpen+0xd4>)
 8000c2e:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = 115200;
 8000c30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce4 <uartOpen+0xd0>)
 8000c32:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c36:	605a      	str	r2, [r3, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce4 <uartOpen+0xd0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 8000c3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ce4 <uartOpen+0xd0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 8000c44:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <uartOpen+0xd0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 8000c4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <uartOpen+0xd0>)
 8000c4c:	220c      	movs	r2, #12
 8000c4e:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <uartOpen+0xd0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c56:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <uartOpen+0xd0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]

      qbufferCreate(&qbuffer[ch], rx_buf, 256);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	4a22      	ldr	r2, [pc, #136]	@ (8000cec <uartOpen+0xd8>)
 8000c62:	4413      	add	r3, r2
 8000c64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c68:	4921      	ldr	r1, [pc, #132]	@ (8000cf0 <uartOpen+0xdc>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fd4b 	bl	8000706 <qbufferCreate>

	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c70:	481c      	ldr	r0, [pc, #112]	@ (8000ce4 <uartOpen+0xd0>)
 8000c72:	f002 fe04 	bl	800387e <HAL_UART_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <uartOpen+0x6e>
	  {
		ret = false;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
          ret = false;
        }
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 8000c80:	e02a      	b.n	8000cd8 <uartOpen+0xc4>
        ret = true;
 8000c82:	2301      	movs	r3, #1
 8000c84:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4a1a      	ldr	r2, [pc, #104]	@ (8000cf4 <uartOpen+0xe0>)
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart2, rx_buf, 256) != HAL_OK)
 8000c8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c92:	4917      	ldr	r1, [pc, #92]	@ (8000cf0 <uartOpen+0xdc>)
 8000c94:	4813      	ldr	r0, [pc, #76]	@ (8000ce4 <uartOpen+0xd0>)
 8000c96:	f002 fe42 	bl	800391e <HAL_UART_Receive_DMA>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <uartOpen+0x90>
          ret = false;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	4a11      	ldr	r2, [pc, #68]	@ (8000cec <uartOpen+0xd8>)
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	4413      	add	r3, r2
 8000cac:	3308      	adds	r3, #8
 8000cae:	6819      	ldr	r1, [r3, #0]
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <uartOpen+0xe4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	1a8a      	subs	r2, r1, r2
 8000cba:	490c      	ldr	r1, [pc, #48]	@ (8000cec <uartOpen+0xd8>)
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	440b      	add	r3, r1
 8000cc0:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8000cc2:	79fa      	ldrb	r2, [r7, #7]
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4909      	ldr	r1, [pc, #36]	@ (8000cec <uartOpen+0xd8>)
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	440a      	add	r2, r1
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	4907      	ldr	r1, [pc, #28]	@ (8000cec <uartOpen+0xd8>)
 8000cd0:	011b      	lsls	r3, r3, #4
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	601a      	str	r2, [r3, #0]
      break;
 8000cd8:	bf00      	nop
  }

  return ret;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200002b4 	.word	0x200002b4
 8000ce8:	40004400 	.word	0x40004400
 8000cec:	200001a4 	.word	0x200001a4
 8000cf0:	200001b4 	.word	0x200001b4
 8000cf4:	200001a0 	.word	0x200001a0
 8000cf8:	200002fc 	.word	0x200002fc

08000cfc <HAL_UART_ErrorCallback>:
  return ret;
}


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <ultrasonicInit>:
#ifdef _USE_HW_ULTRASONIC

static bool is_running;

bool ultrasonicInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	is_running = true;
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <ultrasonicInit+0x14>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
	return true;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	20000340 	.word	0x20000340

08000d38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d38:	f7ff ff4c 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480b      	ldr	r0, [pc, #44]	@ (8000d6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d3e:	490c      	ldr	r1, [pc, #48]	@ (8000d70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d40:	4a0c      	ldr	r2, [pc, #48]	@ (8000d74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a09      	ldr	r2, [pc, #36]	@ (8000d78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d54:	4c09      	ldr	r4, [pc, #36]	@ (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d62:	f006 f92f 	bl	8006fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d66:	f7ff fcc4 	bl	80006f2 <main>
  bx lr
 8000d6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d74:	08007278 	.word	0x08007278
  ldr r2, =_sbss
 8000d78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d7c:	20001e70 	.word	0x20001e70

08000d80 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <CAN1_RX1_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <HAL_Init+0x28>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	@ (8000dac <HAL_Init+0x28>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 fbb3 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f7ff fe52 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fccc 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40022000 	.word	0x40022000

08000db0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <HAL_IncTick+0x1c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <HAL_IncTick+0x20>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a03      	ldr	r2, [pc, #12]	@ (8000dd0 <HAL_IncTick+0x20>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000344 	.word	0x20000344

08000dd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b02      	ldr	r3, [pc, #8]	@ (8000de4 <HAL_GetTick+0x10>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	20000344 	.word	0x20000344

08000de8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e0be      	b.n	8000f88 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d109      	bne.n	8000e2c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fcc0 	bl	80007ac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 fa73 	bl	8001318 <ADC_ConversionStop_Disable>
 8000e32:	4603      	mov	r3, r0
 8000e34:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e3a:	f003 0310 	and.w	r3, r3, #16
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8099 	bne.w	8000f76 <HAL_ADC_Init+0x18e>
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f040 8095 	bne.w	8000f76 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e50:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e54:	f023 0302 	bic.w	r3, r3, #2
 8000e58:	f043 0202 	orr.w	r2, r3, #2
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7b1b      	ldrb	r3, [r3, #12]
 8000e6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e80:	d003      	beq.n	8000e8a <HAL_ADC_Init+0xa2>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d102      	bne.n	8000e90 <HAL_ADC_Init+0xa8>
 8000e8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e8e:	e000      	b.n	8000e92 <HAL_ADC_Init+0xaa>
 8000e90:	2300      	movs	r3, #0
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7d1b      	ldrb	r3, [r3, #20]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d119      	bne.n	8000ed4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7b1b      	ldrb	r3, [r3, #12]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d109      	bne.n	8000ebc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	035a      	lsls	r2, r3, #13
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	e00b      	b.n	8000ed4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec0:	f043 0220 	orr.w	r2, r3, #32
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ecc:	f043 0201 	orr.w	r2, r3, #1
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	4b28      	ldr	r3, [pc, #160]	@ (8000f90 <HAL_ADC_Init+0x1a8>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	430b      	orrs	r3, r1
 8000efa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f04:	d003      	beq.n	8000f0e <HAL_ADC_Init+0x126>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d104      	bne.n	8000f18 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	051b      	lsls	r3, r3, #20
 8000f16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <HAL_ADC_Init+0x1ac>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d10b      	bne.n	8000f54 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f46:	f023 0303 	bic.w	r3, r3, #3
 8000f4a:	f043 0201 	orr.w	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f52:	e018      	b.n	8000f86 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f58:	f023 0312 	bic.w	r3, r3, #18
 8000f5c:	f043 0210 	orr.w	r2, r3, #16
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f68:	f043 0201 	orr.w	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f74:	e007      	b.n	8000f86 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f7a:	f043 0210 	orr.w	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	ffe1f7fd 	.word	0xffe1f7fd
 8000f94:	ff1f0efe 	.word	0xff1f0efe

08000f98 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	f003 0320 	and.w	r3, r3, #32
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d03e      	beq.n	8001038 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d039      	beq.n	8001038 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc8:	f003 0310 	and.w	r3, r3, #16
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d105      	bne.n	8000fdc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000fe6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000fea:	d11d      	bne.n	8001028 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d119      	bne.n	8001028 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0220 	bic.w	r2, r2, #32
 8001002:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001008:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d105      	bne.n	8001028 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001020:	f043 0201 	orr.w	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fb59 	bl	80006e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f06f 0212 	mvn.w	r2, #18
 8001036:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800103e:	2b00      	cmp	r3, #0
 8001040:	d04d      	beq.n	80010de <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	d048      	beq.n	80010de <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	2b00      	cmp	r3, #0
 8001056:	d105      	bne.n	8001064 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800105c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800106e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001072:	d012      	beq.n	800109a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800107e:	2b00      	cmp	r3, #0
 8001080:	d125      	bne.n	80010ce <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800108c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001090:	d11d      	bne.n	80010ce <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001096:	2b00      	cmp	r3, #0
 8001098:	d119      	bne.n	80010ce <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010a8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d105      	bne.n	80010ce <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f963 	bl	800139a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f06f 020c 	mvn.w	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d012      	beq.n	800110e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00d      	beq.n	800110e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f809 	bl	8001116 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f06f 0201 	mvn.w	r2, #1
 800110c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x20>
 8001144:	2302      	movs	r3, #2
 8001146:	e0dc      	b.n	8001302 <HAL_ADC_ConfigChannel+0x1da>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b06      	cmp	r3, #6
 8001156:	d81c      	bhi.n	8001192 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3b05      	subs	r3, #5
 800116a:	221f      	movs	r2, #31
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	4019      	ands	r1, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	3b05      	subs	r3, #5
 8001184:	fa00 f203 	lsl.w	r2, r0, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001190:	e03c      	b.n	800120c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b0c      	cmp	r3, #12
 8001198:	d81c      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	3b23      	subs	r3, #35	@ 0x23
 80011ac:	221f      	movs	r2, #31
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4019      	ands	r1, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	3b23      	subs	r3, #35	@ 0x23
 80011c6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80011d2:	e01b      	b.n	800120c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	3b41      	subs	r3, #65	@ 0x41
 80011e6:	221f      	movs	r2, #31
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4019      	ands	r1, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	3b41      	subs	r3, #65	@ 0x41
 8001200:	fa00 f203 	lsl.w	r2, r0, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b09      	cmp	r3, #9
 8001212:	d91c      	bls.n	800124e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68d9      	ldr	r1, [r3, #12]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	3b1e      	subs	r3, #30
 8001226:	2207      	movs	r2, #7
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	4019      	ands	r1, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	6898      	ldr	r0, [r3, #8]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	3b1e      	subs	r3, #30
 8001240:	fa00 f203 	lsl.w	r2, r0, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	e019      	b.n	8001282 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6919      	ldr	r1, [r3, #16]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	2207      	movs	r2, #7
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	4019      	ands	r1, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6898      	ldr	r0, [r3, #8]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	fa00 f203 	lsl.w	r2, r0, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b10      	cmp	r3, #16
 8001288:	d003      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800128e:	2b11      	cmp	r3, #17
 8001290:	d132      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1d      	ldr	r2, [pc, #116]	@ (800130c <HAL_ADC_ConfigChannel+0x1e4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d125      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d126      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80012b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d11a      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_ADC_ConfigChannel+0x1e8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <HAL_ADC_ConfigChannel+0x1ec>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	0c9a      	lsrs	r2, r3, #18
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012d8:	e002      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3b01      	subs	r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f9      	bne.n	80012da <HAL_ADC_ConfigChannel+0x1b2>
 80012e6:	e007      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ec:	f043 0220 	orr.w	r2, r3, #32
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40012400 	.word	0x40012400
 8001310:	20000000 	.word	0x20000000
 8001314:	431bde83 	.word	0x431bde83

08001318 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b01      	cmp	r3, #1
 8001330:	d12e      	bne.n	8001390 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0201 	bic.w	r2, r2, #1
 8001340:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001342:	f7ff fd47 	bl	8000dd4 <HAL_GetTick>
 8001346:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001348:	e01b      	b.n	8001382 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800134a:	f7ff fd43 	bl	8000dd4 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d914      	bls.n	8001382 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10d      	bne.n	8001382 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136a:	f043 0210 	orr.w	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001376:	f043 0201 	orr.w	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e007      	b.n	8001392 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b01      	cmp	r3, #1
 800138e:	d0dc      	beq.n	800134a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4906      	ldr	r1, [pc, #24]	@ (8001444 <__NVIC_EnableIRQ+0x34>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	@ (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	@ (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	@ 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	@ 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff4f 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff64 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ffb2 	bl	800149c <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff81 	bl	8001448 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff57 	bl	8001410 <__NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e043      	b.n	800160a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <HAL_DMA_Init+0xa8>)
 800158a:	4413      	add	r3, r2
 800158c:	4a22      	ldr	r2, [pc, #136]	@ (8001618 <HAL_DMA_Init+0xac>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	009a      	lsls	r2, r3, #2
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a1f      	ldr	r2, [pc, #124]	@ (800161c <HAL_DMA_Init+0xb0>)
 800159e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80015b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80015ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	bffdfff8 	.word	0xbffdfff8
 8001618:	cccccccd 	.word	0xcccccccd
 800161c:	40020000 	.word	0x40020000

08001620 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_DMA_Start_IT+0x20>
 800163c:	2302      	movs	r3, #2
 800163e:	e04b      	b.n	80016d8 <HAL_DMA_Start_IT+0xb8>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d13a      	bne.n	80016ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2202      	movs	r2, #2
 8001658:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0201 	bic.w	r2, r2, #1
 8001670:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 f937 	bl	80018ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001682:	2b00      	cmp	r3, #0
 8001684:	d008      	beq.n	8001698 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 020e 	orr.w	r2, r2, #14
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e00f      	b.n	80016b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0204 	bic.w	r2, r2, #4
 80016a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 020a 	orr.w	r2, r2, #10
 80016b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0201 	orr.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e005      	b.n	80016d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016d2:	2302      	movs	r3, #2
 80016d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	2204      	movs	r2, #4
 80016fe:	409a      	lsls	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4013      	ands	r3, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d04f      	beq.n	80017a8 <HAL_DMA_IRQHandler+0xc8>
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d04a      	beq.n	80017a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0320 	and.w	r3, r3, #32
 800171c:	2b00      	cmp	r3, #0
 800171e:	d107      	bne.n	8001730 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0204 	bic.w	r2, r2, #4
 800172e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a66      	ldr	r2, [pc, #408]	@ (80018d0 <HAL_DMA_IRQHandler+0x1f0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d029      	beq.n	800178e <HAL_DMA_IRQHandler+0xae>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a65      	ldr	r2, [pc, #404]	@ (80018d4 <HAL_DMA_IRQHandler+0x1f4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d022      	beq.n	800178a <HAL_DMA_IRQHandler+0xaa>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a63      	ldr	r2, [pc, #396]	@ (80018d8 <HAL_DMA_IRQHandler+0x1f8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01a      	beq.n	8001784 <HAL_DMA_IRQHandler+0xa4>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a62      	ldr	r2, [pc, #392]	@ (80018dc <HAL_DMA_IRQHandler+0x1fc>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d012      	beq.n	800177e <HAL_DMA_IRQHandler+0x9e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a60      	ldr	r2, [pc, #384]	@ (80018e0 <HAL_DMA_IRQHandler+0x200>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00a      	beq.n	8001778 <HAL_DMA_IRQHandler+0x98>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a5f      	ldr	r2, [pc, #380]	@ (80018e4 <HAL_DMA_IRQHandler+0x204>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d102      	bne.n	8001772 <HAL_DMA_IRQHandler+0x92>
 800176c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001770:	e00e      	b.n	8001790 <HAL_DMA_IRQHandler+0xb0>
 8001772:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001776:	e00b      	b.n	8001790 <HAL_DMA_IRQHandler+0xb0>
 8001778:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800177c:	e008      	b.n	8001790 <HAL_DMA_IRQHandler+0xb0>
 800177e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001782:	e005      	b.n	8001790 <HAL_DMA_IRQHandler+0xb0>
 8001784:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001788:	e002      	b.n	8001790 <HAL_DMA_IRQHandler+0xb0>
 800178a:	2340      	movs	r3, #64	@ 0x40
 800178c:	e000      	b.n	8001790 <HAL_DMA_IRQHandler+0xb0>
 800178e:	2304      	movs	r3, #4
 8001790:	4a55      	ldr	r2, [pc, #340]	@ (80018e8 <HAL_DMA_IRQHandler+0x208>)
 8001792:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8094 	beq.w	80018c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017a6:	e08e      	b.n	80018c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	2202      	movs	r2, #2
 80017ae:	409a      	lsls	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d056      	beq.n	8001866 <HAL_DMA_IRQHandler+0x186>
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d051      	beq.n	8001866 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10b      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 020a 	bic.w	r2, r2, #10
 80017de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a38      	ldr	r2, [pc, #224]	@ (80018d0 <HAL_DMA_IRQHandler+0x1f0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d029      	beq.n	8001846 <HAL_DMA_IRQHandler+0x166>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a37      	ldr	r2, [pc, #220]	@ (80018d4 <HAL_DMA_IRQHandler+0x1f4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d022      	beq.n	8001842 <HAL_DMA_IRQHandler+0x162>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a35      	ldr	r2, [pc, #212]	@ (80018d8 <HAL_DMA_IRQHandler+0x1f8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01a      	beq.n	800183c <HAL_DMA_IRQHandler+0x15c>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a34      	ldr	r2, [pc, #208]	@ (80018dc <HAL_DMA_IRQHandler+0x1fc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d012      	beq.n	8001836 <HAL_DMA_IRQHandler+0x156>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a32      	ldr	r2, [pc, #200]	@ (80018e0 <HAL_DMA_IRQHandler+0x200>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00a      	beq.n	8001830 <HAL_DMA_IRQHandler+0x150>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a31      	ldr	r2, [pc, #196]	@ (80018e4 <HAL_DMA_IRQHandler+0x204>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d102      	bne.n	800182a <HAL_DMA_IRQHandler+0x14a>
 8001824:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001828:	e00e      	b.n	8001848 <HAL_DMA_IRQHandler+0x168>
 800182a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800182e:	e00b      	b.n	8001848 <HAL_DMA_IRQHandler+0x168>
 8001830:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001834:	e008      	b.n	8001848 <HAL_DMA_IRQHandler+0x168>
 8001836:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800183a:	e005      	b.n	8001848 <HAL_DMA_IRQHandler+0x168>
 800183c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001840:	e002      	b.n	8001848 <HAL_DMA_IRQHandler+0x168>
 8001842:	2320      	movs	r3, #32
 8001844:	e000      	b.n	8001848 <HAL_DMA_IRQHandler+0x168>
 8001846:	2302      	movs	r3, #2
 8001848:	4a27      	ldr	r2, [pc, #156]	@ (80018e8 <HAL_DMA_IRQHandler+0x208>)
 800184a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	d034      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001864:	e02f      	b.n	80018c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	2208      	movs	r2, #8
 800186c:	409a      	lsls	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d028      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x1e8>
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d023      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 020e 	bic.w	r2, r2, #14
 800188e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f202 	lsl.w	r2, r1, r2
 800189e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d004      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
    }
  }
  return;
 80018c6:	bf00      	nop
 80018c8:	bf00      	nop
}
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40020008 	.word	0x40020008
 80018d4:	4002001c 	.word	0x4002001c
 80018d8:	40020030 	.word	0x40020030
 80018dc:	40020044 	.word	0x40020044
 80018e0:	40020058 	.word	0x40020058
 80018e4:	4002006c 	.word	0x4002006c
 80018e8:	40020000 	.word	0x40020000

080018ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001902:	2101      	movs	r1, #1
 8001904:	fa01 f202 	lsl.w	r2, r1, r2
 8001908:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b10      	cmp	r3, #16
 8001918:	d108      	bne.n	800192c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800192a:	e007      	b.n	800193c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	60da      	str	r2, [r3, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
	...

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b08b      	sub	sp, #44	@ 0x2c
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195a:	e169      	b.n	8001c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800195c:	2201      	movs	r2, #1
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	429a      	cmp	r2, r3
 8001976:	f040 8158 	bne.w	8001c2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4a9a      	ldr	r2, [pc, #616]	@ (8001be8 <HAL_GPIO_Init+0x2a0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d05e      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 8001984:	4a98      	ldr	r2, [pc, #608]	@ (8001be8 <HAL_GPIO_Init+0x2a0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d875      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 800198a:	4a98      	ldr	r2, [pc, #608]	@ (8001bec <HAL_GPIO_Init+0x2a4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d058      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 8001990:	4a96      	ldr	r2, [pc, #600]	@ (8001bec <HAL_GPIO_Init+0x2a4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d86f      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 8001996:	4a96      	ldr	r2, [pc, #600]	@ (8001bf0 <HAL_GPIO_Init+0x2a8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d052      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 800199c:	4a94      	ldr	r2, [pc, #592]	@ (8001bf0 <HAL_GPIO_Init+0x2a8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d869      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019a2:	4a94      	ldr	r2, [pc, #592]	@ (8001bf4 <HAL_GPIO_Init+0x2ac>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d04c      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 80019a8:	4a92      	ldr	r2, [pc, #584]	@ (8001bf4 <HAL_GPIO_Init+0x2ac>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d863      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019ae:	4a92      	ldr	r2, [pc, #584]	@ (8001bf8 <HAL_GPIO_Init+0x2b0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d046      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 80019b4:	4a90      	ldr	r2, [pc, #576]	@ (8001bf8 <HAL_GPIO_Init+0x2b0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d85d      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d82a      	bhi.n	8001a14 <HAL_GPIO_Init+0xcc>
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d859      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019c2:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <HAL_GPIO_Init+0x80>)
 80019c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c8:	08001a43 	.word	0x08001a43
 80019cc:	08001a1d 	.word	0x08001a1d
 80019d0:	08001a2f 	.word	0x08001a2f
 80019d4:	08001a71 	.word	0x08001a71
 80019d8:	08001a77 	.word	0x08001a77
 80019dc:	08001a77 	.word	0x08001a77
 80019e0:	08001a77 	.word	0x08001a77
 80019e4:	08001a77 	.word	0x08001a77
 80019e8:	08001a77 	.word	0x08001a77
 80019ec:	08001a77 	.word	0x08001a77
 80019f0:	08001a77 	.word	0x08001a77
 80019f4:	08001a77 	.word	0x08001a77
 80019f8:	08001a77 	.word	0x08001a77
 80019fc:	08001a77 	.word	0x08001a77
 8001a00:	08001a77 	.word	0x08001a77
 8001a04:	08001a77 	.word	0x08001a77
 8001a08:	08001a77 	.word	0x08001a77
 8001a0c:	08001a25 	.word	0x08001a25
 8001a10:	08001a39 	.word	0x08001a39
 8001a14:	4a79      	ldr	r2, [pc, #484]	@ (8001bfc <HAL_GPIO_Init+0x2b4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a1a:	e02c      	b.n	8001a76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	623b      	str	r3, [r7, #32]
          break;
 8001a22:	e029      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	e024      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	3308      	adds	r3, #8
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e01f      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	330c      	adds	r3, #12
 8001a3e:	623b      	str	r3, [r7, #32]
          break;
 8001a40:	e01a      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e013      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	611a      	str	r2, [r3, #16]
          break;
 8001a62:	e009      	b.n	8001a78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a64:	2308      	movs	r3, #8
 8001a66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	615a      	str	r2, [r3, #20]
          break;
 8001a6e:	e003      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
          break;
 8001a74:	e000      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          break;
 8001a76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2bff      	cmp	r3, #255	@ 0xff
 8001a7c:	d801      	bhi.n	8001a82 <HAL_GPIO_Init+0x13a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	e001      	b.n	8001a86 <HAL_GPIO_Init+0x13e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3304      	adds	r3, #4
 8001a86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2bff      	cmp	r3, #255	@ 0xff
 8001a8c:	d802      	bhi.n	8001a94 <HAL_GPIO_Init+0x14c>
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	e002      	b.n	8001a9a <HAL_GPIO_Init+0x152>
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	3b08      	subs	r3, #8
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	401a      	ands	r2, r3
 8001aac:	6a39      	ldr	r1, [r7, #32]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80b1 	beq.w	8001c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a4c      	ldr	r2, [pc, #304]	@ (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae0:	4a48      	ldr	r2, [pc, #288]	@ (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a40      	ldr	r2, [pc, #256]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d013      	beq.n	8001b34 <HAL_GPIO_Init+0x1ec>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c0c <HAL_GPIO_Init+0x2c4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d00d      	beq.n	8001b30 <HAL_GPIO_Init+0x1e8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a3e      	ldr	r2, [pc, #248]	@ (8001c10 <HAL_GPIO_Init+0x2c8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d007      	beq.n	8001b2c <HAL_GPIO_Init+0x1e4>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d101      	bne.n	8001b28 <HAL_GPIO_Init+0x1e0>
 8001b24:	2303      	movs	r3, #3
 8001b26:	e006      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b28:	2304      	movs	r3, #4
 8001b2a:	e004      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e002      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b34:	2300      	movs	r3, #0
 8001b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b38:	f002 0203 	and.w	r2, r2, #3
 8001b3c:	0092      	lsls	r2, r2, #2
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b46:	492f      	ldr	r1, [pc, #188]	@ (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b60:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	492c      	ldr	r1, [pc, #176]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4928      	ldr	r1, [pc, #160]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b88:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4922      	ldr	r1, [pc, #136]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b96:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	491e      	ldr	r1, [pc, #120]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4918      	ldr	r1, [pc, #96]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bbe:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	4914      	ldr	r1, [pc, #80]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d021      	beq.n	8001c1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	490e      	ldr	r1, [pc, #56]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
 8001be4:	e021      	b.n	8001c2a <HAL_GPIO_Init+0x2e2>
 8001be6:	bf00      	nop
 8001be8:	10320000 	.word	0x10320000
 8001bec:	10310000 	.word	0x10310000
 8001bf0:	10220000 	.word	0x10220000
 8001bf4:	10210000 	.word	0x10210000
 8001bf8:	10120000 	.word	0x10120000
 8001bfc:	10110000 	.word	0x10110000
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010000 	.word	0x40010000
 8001c08:	40010800 	.word	0x40010800
 8001c0c:	40010c00 	.word	0x40010c00
 8001c10:	40011000 	.word	0x40011000
 8001c14:	40011400 	.word	0x40011400
 8001c18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4909      	ldr	r1, [pc, #36]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f47f ae8e 	bne.w	800195c <HAL_GPIO_Init+0x14>
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	372c      	adds	r7, #44	@ 0x2c
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40010400 	.word	0x40010400

08001c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c60:	787b      	ldrb	r3, [r7, #1]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c6c:	e003      	b.n	8001c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c6e:	887b      	ldrh	r3, [r7, #2]
 8001c70:	041a      	lsls	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	611a      	str	r2, [r3, #16]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c8a:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c96:	4a05      	ldr	r2, [pc, #20]	@ (8001cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f806 	bl	8001cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e272      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8087 	beq.w	8001df2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce4:	4b92      	ldr	r3, [pc, #584]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d00c      	beq.n	8001d0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf0:	4b8f      	ldr	r3, [pc, #572]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d112      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5e>
 8001cfc:	4b8c      	ldr	r3, [pc, #560]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d08:	d10b      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0a:	4b89      	ldr	r3, [pc, #548]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d06c      	beq.n	8001df0 <HAL_RCC_OscConfig+0x12c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d168      	bne.n	8001df0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e24c      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x76>
 8001d2c:	4b80      	ldr	r3, [pc, #512]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a7f      	ldr	r2, [pc, #508]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e02e      	b.n	8001d98 <HAL_RCC_OscConfig+0xd4>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x98>
 8001d42:	4b7b      	ldr	r3, [pc, #492]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7a      	ldr	r2, [pc, #488]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b78      	ldr	r3, [pc, #480]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a77      	ldr	r2, [pc, #476]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e01d      	b.n	8001d98 <HAL_RCC_OscConfig+0xd4>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0xbc>
 8001d66:	4b72      	ldr	r3, [pc, #456]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a71      	ldr	r2, [pc, #452]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b6f      	ldr	r3, [pc, #444]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6e      	ldr	r2, [pc, #440]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCC_OscConfig+0xd4>
 8001d80:	4b6b      	ldr	r3, [pc, #428]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a6a      	ldr	r2, [pc, #424]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b68      	ldr	r3, [pc, #416]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a67      	ldr	r2, [pc, #412]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff f818 	bl	8000dd4 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff f814 	bl	8000dd4 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	@ 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e200      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	4b5d      	ldr	r3, [pc, #372]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0xe4>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f804 	bl	8000dd4 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff f800 	bl	8000dd4 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	@ 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1ec      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	4b53      	ldr	r3, [pc, #332]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x10c>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d063      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e0a:	4b49      	ldr	r3, [pc, #292]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d11c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x18c>
 8001e16:	4b46      	ldr	r3, [pc, #280]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d116      	bne.n	8001e50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e22:	4b43      	ldr	r3, [pc, #268]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_RCC_OscConfig+0x176>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e1c0      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4939      	ldr	r1, [pc, #228]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	e03a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e58:	4b36      	ldr	r3, [pc, #216]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7fe ffb9 	bl	8000dd4 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e66:	f7fe ffb5 	bl	8000dd4 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e1a1      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e78:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b2a      	ldr	r3, [pc, #168]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4927      	ldr	r1, [pc, #156]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
 8001e98:	e015      	b.n	8001ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9a:	4b26      	ldr	r3, [pc, #152]	@ (8001f34 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe ff98 	bl	8000dd4 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea8:	f7fe ff94 	bl	8000dd4 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e180      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d03a      	beq.n	8001f48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d019      	beq.n	8001f0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eda:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee0:	f7fe ff78 	bl	8000dd4 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee8:	f7fe ff74 	bl	8000dd4 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e160      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f06:	2001      	movs	r0, #1
 8001f08:	f000 fafe 	bl	8002508 <RCC_Delay>
 8001f0c:	e01c      	b.n	8001f48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_RCC_OscConfig+0x274>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7fe ff5e 	bl	8000dd4 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1a:	e00f      	b.n	8001f3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7fe ff5a 	bl	8000dd4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d908      	bls.n	8001f3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e146      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	42420000 	.word	0x42420000
 8001f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	4b92      	ldr	r3, [pc, #584]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1e9      	bne.n	8001f1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a6 	beq.w	80020a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b8b      	ldr	r3, [pc, #556]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10d      	bne.n	8001f82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b88      	ldr	r3, [pc, #544]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a87      	ldr	r2, [pc, #540]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	61d3      	str	r3, [r2, #28]
 8001f72:	4b85      	ldr	r3, [pc, #532]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b82      	ldr	r3, [pc, #520]	@ (800218c <HAL_RCC_OscConfig+0x4c8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d118      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800218c <HAL_RCC_OscConfig+0x4c8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7e      	ldr	r2, [pc, #504]	@ (800218c <HAL_RCC_OscConfig+0x4c8>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe ff1b 	bl	8000dd4 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7fe ff17 	bl	8000dd4 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b64      	cmp	r3, #100	@ 0x64
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e103      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	4b75      	ldr	r3, [pc, #468]	@ (800218c <HAL_RCC_OscConfig+0x4c8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x312>
 8001fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a6e      	ldr	r2, [pc, #440]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6213      	str	r3, [r2, #32]
 8001fd4:	e02d      	b.n	8002032 <HAL_RCC_OscConfig+0x36e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x334>
 8001fde:	4b6a      	ldr	r3, [pc, #424]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a69      	ldr	r2, [pc, #420]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6213      	str	r3, [r2, #32]
 8001fea:	4b67      	ldr	r3, [pc, #412]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a66      	ldr	r2, [pc, #408]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	e01c      	b.n	8002032 <HAL_RCC_OscConfig+0x36e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d10c      	bne.n	800201a <HAL_RCC_OscConfig+0x356>
 8002000:	4b61      	ldr	r3, [pc, #388]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a60      	ldr	r2, [pc, #384]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6213      	str	r3, [r2, #32]
 800200c:	4b5e      	ldr	r3, [pc, #376]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a5d      	ldr	r2, [pc, #372]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6213      	str	r3, [r2, #32]
 8002018:	e00b      	b.n	8002032 <HAL_RCC_OscConfig+0x36e>
 800201a:	4b5b      	ldr	r3, [pc, #364]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a5a      	ldr	r2, [pc, #360]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	6213      	str	r3, [r2, #32]
 8002026:	4b58      	ldr	r3, [pc, #352]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a57      	ldr	r2, [pc, #348]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	f023 0304 	bic.w	r3, r3, #4
 8002030:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d015      	beq.n	8002066 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7fe fecb 	bl	8000dd4 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7fe fec7 	bl	8000dd4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0b1      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	4b4b      	ldr	r3, [pc, #300]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ee      	beq.n	8002042 <HAL_RCC_OscConfig+0x37e>
 8002064:	e014      	b.n	8002090 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7fe feb5 	bl	8000dd4 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe feb1 	bl	8000dd4 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e09b      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002084:	4b40      	ldr	r3, [pc, #256]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ee      	bne.n	800206e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d105      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002096:	4b3c      	ldr	r3, [pc, #240]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a3b      	ldr	r2, [pc, #236]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8087 	beq.w	80021ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ac:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d061      	beq.n	800217c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d146      	bne.n	800214e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c0:	4b33      	ldr	r3, [pc, #204]	@ (8002190 <HAL_RCC_OscConfig+0x4cc>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7fe fe85 	bl	8000dd4 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ce:	f7fe fe81 	bl	8000dd4 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e06d      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e0:	4b29      	ldr	r3, [pc, #164]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f4:	d108      	bne.n	8002108 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020f6:	4b24      	ldr	r3, [pc, #144]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4921      	ldr	r1, [pc, #132]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002108:	4b1f      	ldr	r3, [pc, #124]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a19      	ldr	r1, [r3, #32]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002118:	430b      	orrs	r3, r1
 800211a:	491b      	ldr	r1, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7fe fe55 	bl	8000dd4 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212e:	f7fe fe51 	bl	8000dd4 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e03d      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x46a>
 800214c:	e035      	b.n	80021ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe fe3e 	bl	8000dd4 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe fe3a 	bl	8000dd4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e026      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216e:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x498>
 800217a:	e01e      	b.n	80021ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d107      	bne.n	8002194 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e019      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
 8002190:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <HAL_RCC_OscConfig+0x500>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0d0      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d910      	bls.n	800220c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b67      	ldr	r3, [pc, #412]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 0207 	bic.w	r2, r3, #7
 80021f2:	4965      	ldr	r1, [pc, #404]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b63      	ldr	r3, [pc, #396]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0b8      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d020      	beq.n	800225a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002224:	4b59      	ldr	r3, [pc, #356]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a58      	ldr	r2, [pc, #352]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800222e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800223c:	4b53      	ldr	r3, [pc, #332]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a52      	ldr	r2, [pc, #328]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4b50      	ldr	r3, [pc, #320]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	494d      	ldr	r1, [pc, #308]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d040      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b47      	ldr	r3, [pc, #284]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d115      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e07f      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002286:	4b41      	ldr	r3, [pc, #260]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e073      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b3d      	ldr	r3, [pc, #244]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06b      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	4b39      	ldr	r3, [pc, #228]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f023 0203 	bic.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4936      	ldr	r1, [pc, #216]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b8:	f7fe fd8c 	bl	8000dd4 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7fe fd88 	bl	8000dd4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e053      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	4b2d      	ldr	r3, [pc, #180]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1eb      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e8:	4b27      	ldr	r3, [pc, #156]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d210      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b24      	ldr	r3, [pc, #144]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0207 	bic.w	r2, r3, #7
 80022fe:	4922      	ldr	r1, [pc, #136]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e032      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002324:	4b19      	ldr	r3, [pc, #100]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4916      	ldr	r1, [pc, #88]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002342:	4b12      	ldr	r3, [pc, #72]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	490e      	ldr	r1, [pc, #56]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002356:	f000 f821 	bl	800239c <HAL_RCC_GetSysClockFreq>
 800235a:	4602      	mov	r2, r0
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	490a      	ldr	r1, [pc, #40]	@ (8002390 <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	5ccb      	ldrb	r3, [r1, r3]
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	4a09      	ldr	r2, [pc, #36]	@ (8002394 <HAL_RCC_ClockConfig+0x1cc>)
 8002370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002372:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_RCC_ClockConfig+0x1d0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fb64 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40022000 	.word	0x40022000
 800238c:	40021000 	.word	0x40021000
 8002390:	08007244 	.word	0x08007244
 8002394:	20000000 	.word	0x20000000
 8002398:	20000004 	.word	0x20000004

0800239c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x94>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d002      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x30>
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0x36>
 80023ca:	e027      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023cc:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ce:	613b      	str	r3, [r7, #16]
      break;
 80023d0:	e027      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	0c9b      	lsrs	r3, r3, #18
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	4a17      	ldr	r2, [pc, #92]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023dc:	5cd3      	ldrb	r3, [r2, r3]
 80023de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d010      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023ea:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x94>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	0c5b      	lsrs	r3, r3, #17
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	4a11      	ldr	r2, [pc, #68]	@ (800243c <HAL_RCC_GetSysClockFreq+0xa0>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x98>)
 80023fe:	fb03 f202 	mul.w	r2, r3, r2
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e004      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a0c      	ldr	r2, [pc, #48]	@ (8002440 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002410:	fb02 f303 	mul.w	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	613b      	str	r3, [r7, #16]
      break;
 800241a:	e002      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4b05      	ldr	r3, [pc, #20]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x98>)
 800241e:	613b      	str	r3, [r7, #16]
      break;
 8002420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002422:	693b      	ldr	r3, [r7, #16]
}
 8002424:	4618      	mov	r0, r3
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	007a1200 	.word	0x007a1200
 8002438:	0800725c 	.word	0x0800725c
 800243c:	0800726c 	.word	0x0800726c
 8002440:	003d0900 	.word	0x003d0900

08002444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b02      	ldr	r3, [pc, #8]	@ (8002454 <HAL_RCC_GetHCLKFreq+0x10>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800245c:	f7ff fff2 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	@ (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000
 800247c:	08007254 	.word	0x08007254

08002480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002484:	f7ff ffde 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	0adb      	lsrs	r3, r3, #11
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	@ (80024a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000
 80024a4:	08007254 	.word	0x08007254

080024a8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	220f      	movs	r2, #15
 80024b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_RCC_GetClockConfig+0x58>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <HAL_RCC_GetClockConfig+0x58>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_RCC_GetClockConfig+0x58>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_RCC_GetClockConfig+0x58>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_RCC_GetClockConfig+0x5c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0207 	and.w	r2, r3, #7
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	40021000 	.word	0x40021000
 8002504:	40022000 	.word	0x40022000

08002508 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002510:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <RCC_Delay+0x34>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <RCC_Delay+0x38>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0a5b      	lsrs	r3, r3, #9
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002524:	bf00      	nop
  }
  while (Delay --);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	60fa      	str	r2, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f9      	bne.n	8002524 <RCC_Delay+0x1c>
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	20000000 	.word	0x20000000
 8002540:	10624dd3 	.word	0x10624dd3

08002544 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d07d      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002560:	2300      	movs	r3, #0
 8002562:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002564:	4b4f      	ldr	r3, [pc, #316]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10d      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	4b4c      	ldr	r3, [pc, #304]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	4a4b      	ldr	r2, [pc, #300]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257a:	61d3      	str	r3, [r2, #28]
 800257c:	4b49      	ldr	r3, [pc, #292]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002588:	2301      	movs	r3, #1
 800258a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	4b46      	ldr	r3, [pc, #280]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d118      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002598:	4b43      	ldr	r3, [pc, #268]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a42      	ldr	r2, [pc, #264]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800259e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a4:	f7fe fc16 	bl	8000dd4 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	e008      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ac:	f7fe fc12 	bl	8000dd4 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	@ 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e06d      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025ca:	4b36      	ldr	r3, [pc, #216]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d02e      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d027      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025e8:	4b2e      	ldr	r3, [pc, #184]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025f2:	4b2e      	ldr	r3, [pc, #184]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f8:	4b2c      	ldr	r3, [pc, #176]	@ (80026ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025fe:	4a29      	ldr	r2, [pc, #164]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d014      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fbe1 	bl	8000dd4 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe fbdd 	bl	8000dd4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e036      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262c:	4b1d      	ldr	r3, [pc, #116]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0ee      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002638:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4917      	ldr	r1, [pc, #92]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002646:	4313      	orrs	r3, r2
 8002648:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002650:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	4a13      	ldr	r2, [pc, #76]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800265a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002668:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	490b      	ldr	r1, [pc, #44]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002686:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	4904      	ldr	r1, [pc, #16]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40007000 	.word	0x40007000
 80026ac:	42420440 	.word	0x42420440

080026b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e041      	b.n	8002746 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe f8d8 	bl	800088c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3304      	adds	r3, #4
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f000 fc6a 	bl	8002fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d001      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e03a      	b.n	80027de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a18      	ldr	r2, [pc, #96]	@ (80027e8 <HAL_TIM_Base_Start_IT+0x98>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00e      	beq.n	80027a8 <HAL_TIM_Base_Start_IT+0x58>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002792:	d009      	beq.n	80027a8 <HAL_TIM_Base_Start_IT+0x58>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a14      	ldr	r2, [pc, #80]	@ (80027ec <HAL_TIM_Base_Start_IT+0x9c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <HAL_TIM_Base_Start_IT+0x58>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a13      	ldr	r2, [pc, #76]	@ (80027f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d111      	bne.n	80027cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d010      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0201 	orr.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ca:	e007      	b.n	80027dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40000400 	.word	0x40000400
 80027f0:	40000800 	.word	0x40000800

080027f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e041      	b.n	800288a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f839 	bl	8002892 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	4619      	mov	r1, r3
 8002832:	4610      	mov	r0, r2
 8002834:	f000 fbc8 	bl	8002fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e041      	b.n	800293a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f839 	bl	8002942 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	4610      	mov	r0, r2
 80028e4:	f000 fb70 	bl	8002fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d020      	beq.n	80029b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01b      	beq.n	80029b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0202 	mvn.w	r2, #2
 8002988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 faf6 	bl	8002f90 <HAL_TIM_IC_CaptureCallback>
 80029a4:	e005      	b.n	80029b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fae9 	bl	8002f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 faf8 	bl	8002fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d020      	beq.n	8002a04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01b      	beq.n	8002a04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0204 	mvn.w	r2, #4
 80029d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fad0 	bl	8002f90 <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fac3 	bl	8002f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fad2 	bl	8002fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d020      	beq.n	8002a50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01b      	beq.n	8002a50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0208 	mvn.w	r2, #8
 8002a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2204      	movs	r2, #4
 8002a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 faaa 	bl	8002f90 <HAL_TIM_IC_CaptureCallback>
 8002a3c:	e005      	b.n	8002a4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fa9d 	bl	8002f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 faac 	bl	8002fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d020      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01b      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0210 	mvn.w	r2, #16
 8002a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2208      	movs	r2, #8
 8002a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa84 	bl	8002f90 <HAL_TIM_IC_CaptureCallback>
 8002a88:	e005      	b.n	8002a96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa77 	bl	8002f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fa86 	bl	8002fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00c      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0201 	mvn.w	r2, #1
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fd fc36 	bl	800032c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00c      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fec4 	bl	800386c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00c      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fa56 	bl	8002fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00c      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0220 	mvn.w	r2, #32
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fe97 	bl	800385a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e088      	b.n	8002c64 <HAL_TIM_IC_ConfigChannel+0x130>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002b70:	f000 fc20 	bl	80033b4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 020c 	bic.w	r2, r2, #12
 8002b82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6999      	ldr	r1, [r3, #24]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	619a      	str	r2, [r3, #24]
 8002b96:	e060      	b.n	8002c5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d11c      	bne.n	8002bd8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002bae:	f000 fc89 	bl	80034c4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002bc0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6999      	ldr	r1, [r3, #24]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	021a      	lsls	r2, r3, #8
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	619a      	str	r2, [r3, #24]
 8002bd6:	e040      	b.n	8002c5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d11b      	bne.n	8002c16 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002bee:	f000 fcd4 	bl	800359a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 020c 	bic.w	r2, r2, #12
 8002c00:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69d9      	ldr	r1, [r3, #28]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]
 8002c14:	e021      	b.n	8002c5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	d11c      	bne.n	8002c56 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002c2c:	f000 fcf0 	bl	8003610 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69da      	ldr	r2, [r3, #28]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002c3e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69d9      	ldr	r1, [r3, #28]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	021a      	lsls	r2, r3, #8
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	61da      	str	r2, [r3, #28]
 8002c54:	e001      	b.n	8002c5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e0ae      	b.n	8002de8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	f200 809f 	bhi.w	8002dd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cd5 	.word	0x08002cd5
 8002ca4:	08002dd9 	.word	0x08002dd9
 8002ca8:	08002dd9 	.word	0x08002dd9
 8002cac:	08002dd9 	.word	0x08002dd9
 8002cb0:	08002d15 	.word	0x08002d15
 8002cb4:	08002dd9 	.word	0x08002dd9
 8002cb8:	08002dd9 	.word	0x08002dd9
 8002cbc:	08002dd9 	.word	0x08002dd9
 8002cc0:	08002d57 	.word	0x08002d57
 8002cc4:	08002dd9 	.word	0x08002dd9
 8002cc8:	08002dd9 	.word	0x08002dd9
 8002ccc:	08002dd9 	.word	0x08002dd9
 8002cd0:	08002d97 	.word	0x08002d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f9e2 	bl	80030a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0208 	orr.w	r2, r2, #8
 8002cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0204 	bic.w	r2, r2, #4
 8002cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6999      	ldr	r1, [r3, #24]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	619a      	str	r2, [r3, #24]
      break;
 8002d12:	e064      	b.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fa28 	bl	8003170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6999      	ldr	r1, [r3, #24]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	021a      	lsls	r2, r3, #8
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	619a      	str	r2, [r3, #24]
      break;
 8002d54:	e043      	b.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fa71 	bl	8003244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0208 	orr.w	r2, r2, #8
 8002d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0204 	bic.w	r2, r2, #4
 8002d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69d9      	ldr	r1, [r3, #28]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	61da      	str	r2, [r3, #28]
      break;
 8002d94:	e023      	b.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fabb 	bl	8003318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69da      	ldr	r2, [r3, #28]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69d9      	ldr	r1, [r3, #28]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	021a      	lsls	r2, r3, #8
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	61da      	str	r2, [r3, #28]
      break;
 8002dd6:	e002      	b.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	75fb      	strb	r3, [r7, #23]
      break;
 8002ddc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_TIM_ConfigClockSource+0x1c>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e0b4      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x186>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e44:	d03e      	beq.n	8002ec4 <HAL_TIM_ConfigClockSource+0xd4>
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4a:	f200 8087 	bhi.w	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e52:	f000 8086 	beq.w	8002f62 <HAL_TIM_ConfigClockSource+0x172>
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e5a:	d87f      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e5c:	2b70      	cmp	r3, #112	@ 0x70
 8002e5e:	d01a      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xa6>
 8002e60:	2b70      	cmp	r3, #112	@ 0x70
 8002e62:	d87b      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e64:	2b60      	cmp	r3, #96	@ 0x60
 8002e66:	d050      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x11a>
 8002e68:	2b60      	cmp	r3, #96	@ 0x60
 8002e6a:	d877      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e6c:	2b50      	cmp	r3, #80	@ 0x50
 8002e6e:	d03c      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0xfa>
 8002e70:	2b50      	cmp	r3, #80	@ 0x50
 8002e72:	d873      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e74:	2b40      	cmp	r3, #64	@ 0x40
 8002e76:	d058      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x13a>
 8002e78:	2b40      	cmp	r3, #64	@ 0x40
 8002e7a:	d86f      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e7c:	2b30      	cmp	r3, #48	@ 0x30
 8002e7e:	d064      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e80:	2b30      	cmp	r3, #48	@ 0x30
 8002e82:	d86b      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d060      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d867      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d05c      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d05a      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e94:	e062      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ea6:	f000 fc09 	bl	80036bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	609a      	str	r2, [r3, #8]
      break;
 8002ec2:	e04f      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ed4:	f000 fbf2 	bl	80036bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ee6:	609a      	str	r2, [r3, #8]
      break;
 8002ee8:	e03c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f000 fab6 	bl	8003468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2150      	movs	r1, #80	@ 0x50
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fbc0 	bl	8003688 <TIM_ITRx_SetConfig>
      break;
 8002f08:	e02c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f16:	461a      	mov	r2, r3
 8002f18:	f000 fb10 	bl	800353c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2160      	movs	r1, #96	@ 0x60
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fbb0 	bl	8003688 <TIM_ITRx_SetConfig>
      break;
 8002f28:	e01c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f36:	461a      	mov	r2, r3
 8002f38:	f000 fa96 	bl	8003468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2140      	movs	r1, #64	@ 0x40
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fba0 	bl	8003688 <TIM_ITRx_SetConfig>
      break;
 8002f48:	e00c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	4610      	mov	r0, r2
 8002f56:	f000 fb97 	bl	8003688 <TIM_ITRx_SetConfig>
      break;
 8002f5a:	e003      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e000      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
	...

08002fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a2f      	ldr	r2, [pc, #188]	@ (8003098 <TIM_Base_SetConfig+0xd0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00b      	beq.n	8002ff8 <TIM_Base_SetConfig+0x30>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe6:	d007      	beq.n	8002ff8 <TIM_Base_SetConfig+0x30>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a2c      	ldr	r2, [pc, #176]	@ (800309c <TIM_Base_SetConfig+0xd4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d003      	beq.n	8002ff8 <TIM_Base_SetConfig+0x30>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80030a0 <TIM_Base_SetConfig+0xd8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d108      	bne.n	800300a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a22      	ldr	r2, [pc, #136]	@ (8003098 <TIM_Base_SetConfig+0xd0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00b      	beq.n	800302a <TIM_Base_SetConfig+0x62>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003018:	d007      	beq.n	800302a <TIM_Base_SetConfig+0x62>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a1f      	ldr	r2, [pc, #124]	@ (800309c <TIM_Base_SetConfig+0xd4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d003      	beq.n	800302a <TIM_Base_SetConfig+0x62>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a1e      	ldr	r2, [pc, #120]	@ (80030a0 <TIM_Base_SetConfig+0xd8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d108      	bne.n	800303c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4313      	orrs	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a0d      	ldr	r2, [pc, #52]	@ (8003098 <TIM_Base_SetConfig+0xd0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d103      	bne.n	8003070 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f023 0201 	bic.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	611a      	str	r2, [r3, #16]
  }
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40000400 	.word	0x40000400
 80030a0:	40000800 	.word	0x40000800

080030a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f023 0201 	bic.w	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0303 	bic.w	r3, r3, #3
 80030da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f023 0302 	bic.w	r3, r3, #2
 80030ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a1c      	ldr	r2, [pc, #112]	@ (800316c <TIM_OC1_SetConfig+0xc8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10c      	bne.n	800311a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0308 	bic.w	r3, r3, #8
 8003106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a13      	ldr	r2, [pc, #76]	@ (800316c <TIM_OC1_SetConfig+0xc8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d111      	bne.n	8003146 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	621a      	str	r2, [r3, #32]
}
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40012c00 	.word	0x40012c00

08003170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f023 0210 	bic.w	r2, r3, #16
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800319e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f023 0320 	bic.w	r3, r3, #32
 80031ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003240 <TIM_OC2_SetConfig+0xd0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d10d      	bne.n	80031ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a14      	ldr	r2, [pc, #80]	@ (8003240 <TIM_OC2_SetConfig+0xd0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d113      	bne.n	800321c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	621a      	str	r2, [r3, #32]
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	40012c00 	.word	0x40012c00

08003244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800328c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a1d      	ldr	r2, [pc, #116]	@ (8003314 <TIM_OC3_SetConfig+0xd0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d10d      	bne.n	80032be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a14      	ldr	r2, [pc, #80]	@ (8003314 <TIM_OC3_SetConfig+0xd0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d113      	bne.n	80032ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	621a      	str	r2, [r3, #32]
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40012c00 	.word	0x40012c00

08003318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800334e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	031b      	lsls	r3, r3, #12
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a0f      	ldr	r2, [pc, #60]	@ (80033b0 <TIM_OC4_SetConfig+0x98>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d109      	bne.n	800338c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800337e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	019b      	lsls	r3, r3, #6
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	621a      	str	r2, [r3, #32]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	40012c00 	.word	0x40012c00

080033b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f023 0201 	bic.w	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a1f      	ldr	r2, [pc, #124]	@ (800345c <TIM_TI1_SetConfig+0xa8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00b      	beq.n	80033fa <TIM_TI1_SetConfig+0x46>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e8:	d007      	beq.n	80033fa <TIM_TI1_SetConfig+0x46>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <TIM_TI1_SetConfig+0xac>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_TI1_SetConfig+0x46>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <TIM_TI1_SetConfig+0xb0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <TIM_TI1_SetConfig+0x4a>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <TIM_TI1_SetConfig+0x4c>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e003      	b.n	800341e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	b2db      	uxtb	r3, r3
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f023 030a 	bic.w	r3, r3, #10
 8003438:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f003 030a 	and.w	r3, r3, #10
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	621a      	str	r2, [r3, #32]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800

08003468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f023 0201 	bic.w	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f023 030a 	bic.w	r3, r3, #10
 80034a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f023 0210 	bic.w	r2, r3, #16
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	031b      	lsls	r3, r3, #12
 8003508:	b29b      	uxth	r3, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003516:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f023 0210 	bic.w	r2, r3, #16
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	031b      	lsls	r3, r3, #12
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003578:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800359a:	b480      	push	{r7}
 800359c:	b087      	sub	sp, #28
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f023 0303 	bic.w	r3, r3, #3
 80035c6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800363c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800364e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	031b      	lsls	r3, r3, #12
 8003654:	b29b      	uxth	r3, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003662:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	031b      	lsls	r3, r3, #12
 8003668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f043 0307 	orr.w	r3, r3, #7
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	609a      	str	r2, [r3, #8]
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	021a      	lsls	r2, r3, #8
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	431a      	orrs	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	609a      	str	r2, [r3, #8]
}
 80036f0:	bf00      	nop
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003710:	2302      	movs	r3, #2
 8003712:	e046      	b.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a16      	ldr	r2, [pc, #88]	@ (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003760:	d009      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a12      	ldr	r2, [pc, #72]	@ (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a10      	ldr	r2, [pc, #64]	@ (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d10c      	bne.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800377c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4313      	orrs	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800

080037b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e03d      	b.n	8003850 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e042      	b.n	8003916 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fd f865 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2224      	movs	r2, #36	@ 0x24
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fa86 	bl	8003dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	4613      	mov	r3, r2
 800392a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b20      	cmp	r3, #32
 8003936:	d112      	bne.n	800395e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_UART_Receive_DMA+0x26>
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e00b      	b.n	8003960 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	461a      	mov	r2, r3
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f919 	bl	8003b8c <UART_Start_Receive_DMA>
 800395a:	4603      	mov	r3, r0
 800395c:	e000      	b.n	8003960 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr

0800397a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b09c      	sub	sp, #112	@ 0x70
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d172      	bne.n	8003a92 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80039ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039ae:	2200      	movs	r2, #0
 80039b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	330c      	adds	r3, #12
 80039d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80039d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039d4:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e5      	bne.n	80039b2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3314      	adds	r3, #20
 80039ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f0:	e853 3f00 	ldrex	r3, [r3]
 80039f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80039fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3314      	adds	r3, #20
 8003a04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a06:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e5      	bne.n	80039e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3314      	adds	r3, #20
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	623b      	str	r3, [r7, #32]
   return(result);
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a30:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3314      	adds	r3, #20
 8003a38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e5      	bne.n	8003a1a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d119      	bne.n	8003a92 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f023 0310 	bic.w	r3, r3, #16
 8003a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a7e:	61fa      	str	r2, [r7, #28]
 8003a80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	69b9      	ldr	r1, [r7, #24]
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	617b      	str	r3, [r7, #20]
   return(result);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e5      	bne.n	8003a5e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a94:	2200      	movs	r2, #0
 8003a96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d106      	bne.n	8003aae <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aa2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003aa8:	f7ff ff67 	bl	800397a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003aac:	e002      	b.n	8003ab4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003aae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003ab0:	f7fd f92d 	bl	8000d0e <HAL_UART_RxCpltCallback>
}
 8003ab4:	bf00      	nop
 8003ab6:	3770      	adds	r7, #112	@ 0x70
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d108      	bne.n	8003aea <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff ff49 	bl	800397a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ae8:	e002      	b.n	8003af0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7ff ff3c 	bl	8003968 <HAL_UART_RxHalfCpltCallback>
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b21      	cmp	r3, #33	@ 0x21
 8003b2a:	d108      	bne.n	8003b3e <UART_DMAError+0x46>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2200      	movs	r2, #0
 8003b36:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003b38:	68b8      	ldr	r0, [r7, #8]
 8003b3a:	f000 f8c1 	bl	8003cc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b22      	cmp	r3, #34	@ 0x22
 8003b5e:	d108      	bne.n	8003b72 <UART_DMAError+0x7a>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003b6c:	68b8      	ldr	r0, [r7, #8]
 8003b6e:	f000 f8ce 	bl	8003d0e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	f043 0210 	orr.w	r2, r3, #16
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b7e:	68b8      	ldr	r0, [r7, #8]
 8003b80:	f7fd f8bc 	bl	8000cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b098      	sub	sp, #96	@ 0x60
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	4613      	mov	r3, r2
 8003b98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	88fa      	ldrh	r2, [r7, #6]
 8003ba4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2222      	movs	r2, #34	@ 0x22
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb8:	4a3e      	ldr	r2, [pc, #248]	@ (8003cb4 <UART_Start_Receive_DMA+0x128>)
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc0:	4a3d      	ldr	r2, [pc, #244]	@ (8003cb8 <UART_Start_Receive_DMA+0x12c>)
 8003bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc8:	4a3c      	ldr	r2, [pc, #240]	@ (8003cbc <UART_Start_Receive_DMA+0x130>)
 8003bca:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003bd4:	f107 0308 	add.w	r3, r7, #8
 8003bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3304      	adds	r3, #4
 8003be4:	4619      	mov	r1, r3
 8003be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	f7fd fd18 	bl	8001620 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d019      	beq.n	8003c42 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	330c      	adds	r3, #12
 8003c2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c2e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003c30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003c34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e5      	bne.n	8003c0e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3314      	adds	r3, #20
 8003c60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c62:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e5      	bne.n	8003c42 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	617b      	str	r3, [r7, #20]
   return(result);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c96:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6a39      	ldr	r1, [r7, #32]
 8003c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e5      	bne.n	8003c76 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3760      	adds	r7, #96	@ 0x60
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	08003991 	.word	0x08003991
 8003cb8:	08003abd 	.word	0x08003abd
 8003cbc:	08003af9 	.word	0x08003af9

08003cc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	61ba      	str	r2, [r7, #24]
 8003cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6979      	ldr	r1, [r7, #20]
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e5      	bne.n	8003cc8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003d04:	bf00      	nop
 8003d06:	3724      	adds	r7, #36	@ 0x24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b095      	sub	sp, #84	@ 0x54
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d36:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e5      	bne.n	8003d16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e5      	bne.n	8003d4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d119      	bne.n	8003dba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f023 0310 	bic.w	r3, r3, #16
 8003d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003da6:	61ba      	str	r2, [r7, #24]
 8003da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6979      	ldr	r1, [r7, #20]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	613b      	str	r3, [r7, #16]
   return(result);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dc8:	bf00      	nop
 8003dca:	3754      	adds	r7, #84	@ 0x54
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
	...

08003dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003e0e:	f023 030c 	bic.w	r3, r3, #12
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee8 <UART_SetConfig+0x114>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d103      	bne.n	8003e44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e3c:	f7fe fb20 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	e002      	b.n	8003e4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e44:	f7fe fb08 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8003e48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009a      	lsls	r2, r3, #2
 8003e54:	441a      	add	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	4a22      	ldr	r2, [pc, #136]	@ (8003eec <UART_SetConfig+0x118>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	0119      	lsls	r1, r3, #4
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	009a      	lsls	r2, r3, #2
 8003e74:	441a      	add	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e80:	4b1a      	ldr	r3, [pc, #104]	@ (8003eec <UART_SetConfig+0x118>)
 8003e82:	fba3 0302 	umull	r0, r3, r3, r2
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	2064      	movs	r0, #100	@ 0x64
 8003e8a:	fb00 f303 	mul.w	r3, r0, r3
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	3332      	adds	r3, #50	@ 0x32
 8003e94:	4a15      	ldr	r2, [pc, #84]	@ (8003eec <UART_SetConfig+0x118>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ea0:	4419      	add	r1, r3
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009a      	lsls	r2, r3, #2
 8003eac:	441a      	add	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <UART_SetConfig+0x118>)
 8003eba:	fba3 0302 	umull	r0, r3, r3, r2
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	2064      	movs	r0, #100	@ 0x64
 8003ec2:	fb00 f303 	mul.w	r3, r0, r3
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	3332      	adds	r3, #50	@ 0x32
 8003ecc:	4a07      	ldr	r2, [pc, #28]	@ (8003eec <UART_SetConfig+0x118>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	f003 020f 	and.w	r2, r3, #15
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	440a      	add	r2, r1
 8003ede:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40013800 	.word	0x40013800
 8003eec:	51eb851f 	.word	0x51eb851f

08003ef0 <__NVIC_SetPriority>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	6039      	str	r1, [r7, #0]
 8003efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	db0a      	blt.n	8003f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	490c      	ldr	r1, [pc, #48]	@ (8003f3c <__NVIC_SetPriority+0x4c>)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	0112      	lsls	r2, r2, #4
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	440b      	add	r3, r1
 8003f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003f18:	e00a      	b.n	8003f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	4908      	ldr	r1, [pc, #32]	@ (8003f40 <__NVIC_SetPriority+0x50>)
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	3b04      	subs	r3, #4
 8003f28:	0112      	lsls	r2, r2, #4
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	761a      	strb	r2, [r3, #24]
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	e000e100 	.word	0xe000e100
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f48:	4b05      	ldr	r3, [pc, #20]	@ (8003f60 <SysTick_Handler+0x1c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f4c:	f001 ffbc 	bl	8005ec8 <xTaskGetSchedulerState>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d001      	beq.n	8003f5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f56:	f002 fd5f 	bl	8006a18 <xPortSysTickHandler>
  }
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	e000e010 	.word	0xe000e010

08003f64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f68:	2100      	movs	r1, #0
 8003f6a:	f06f 0004 	mvn.w	r0, #4
 8003f6e:	f7ff ffbf 	bl	8003ef0 <__NVIC_SetPriority>
#endif
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f7e:	f3ef 8305 	mrs	r3, IPSR
 8003f82:	603b      	str	r3, [r7, #0]
  return(result);
 8003f84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f8a:	f06f 0305 	mvn.w	r3, #5
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	e00c      	b.n	8003fac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f92:	4b09      	ldr	r3, [pc, #36]	@ (8003fb8 <osKernelInitialize+0x40>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f9a:	4b07      	ldr	r3, [pc, #28]	@ (8003fb8 <osKernelInitialize+0x40>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	607b      	str	r3, [r7, #4]
 8003fa4:	e002      	b.n	8003fac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003faa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fac:	687b      	ldr	r3, [r7, #4]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	20000348 	.word	0x20000348

08003fbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fc2:	f3ef 8305 	mrs	r3, IPSR
 8003fc6:	603b      	str	r3, [r7, #0]
  return(result);
 8003fc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003fce:	f06f 0305 	mvn.w	r3, #5
 8003fd2:	607b      	str	r3, [r7, #4]
 8003fd4:	e010      	b.n	8003ff8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <osKernelStart+0x48>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d109      	bne.n	8003ff2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003fde:	f7ff ffc1 	bl	8003f64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003fe2:	4b08      	ldr	r3, [pc, #32]	@ (8004004 <osKernelStart+0x48>)
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003fe8:	f001 fb0e 	bl	8005608 <vTaskStartScheduler>
      stat = osOK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	e002      	b.n	8003ff8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ff8:	687b      	ldr	r3, [r7, #4]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000348 	.word	0x20000348

08004008 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b08e      	sub	sp, #56	@ 0x38
 800400c:	af04      	add	r7, sp, #16
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004018:	f3ef 8305 	mrs	r3, IPSR
 800401c:	617b      	str	r3, [r7, #20]
  return(result);
 800401e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004020:	2b00      	cmp	r3, #0
 8004022:	d17e      	bne.n	8004122 <osThreadNew+0x11a>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d07b      	beq.n	8004122 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800402a:	2380      	movs	r3, #128	@ 0x80
 800402c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800402e:	2318      	movs	r3, #24
 8004030:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
 800403a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d045      	beq.n	80040ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <osThreadNew+0x48>
        name = attr->name;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <osThreadNew+0x6e>
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b38      	cmp	r3, #56	@ 0x38
 8004068:	d805      	bhi.n	8004076 <osThreadNew+0x6e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <osThreadNew+0x72>
        return (NULL);
 8004076:	2300      	movs	r3, #0
 8004078:	e054      	b.n	8004124 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	089b      	lsrs	r3, r3, #2
 8004088:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00e      	beq.n	80040b0 <osThreadNew+0xa8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2ba7      	cmp	r3, #167	@ 0xa7
 8004098:	d90a      	bls.n	80040b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d006      	beq.n	80040b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <osThreadNew+0xa8>
        mem = 1;
 80040aa:	2301      	movs	r3, #1
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	e010      	b.n	80040d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10c      	bne.n	80040d2 <osThreadNew+0xca>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d108      	bne.n	80040d2 <osThreadNew+0xca>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <osThreadNew+0xca>
          mem = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e001      	b.n	80040d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d110      	bne.n	80040fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040e0:	9202      	str	r2, [sp, #8]
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	6a3a      	ldr	r2, [r7, #32]
 80040ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f001 f896 	bl	8005220 <xTaskCreateStatic>
 80040f4:	4603      	mov	r3, r0
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	e013      	b.n	8004122 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d110      	bne.n	8004122 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	b29a      	uxth	r2, r3
 8004104:	f107 0310 	add.w	r3, r7, #16
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f001 f8e4 	bl	80052e0 <xTaskCreate>
 8004118:	4603      	mov	r3, r0
 800411a:	2b01      	cmp	r3, #1
 800411c:	d001      	beq.n	8004122 <osThreadNew+0x11a>
            hTask = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004122:	693b      	ldr	r3, [r7, #16]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3728      	adds	r7, #40	@ 0x28
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004134:	f3ef 8305 	mrs	r3, IPSR
 8004138:	60bb      	str	r3, [r7, #8]
  return(result);
 800413a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <osDelay+0x1c>
    stat = osErrorISR;
 8004140:	f06f 0305 	mvn.w	r3, #5
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e007      	b.n	8004158 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f001 fa22 	bl	800559c <vTaskDelay>
    }
  }

  return (stat);
 8004158:	68fb      	ldr	r3, [r7, #12]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800416e:	f3ef 8305 	mrs	r3, IPSR
 8004172:	60fb      	str	r3, [r7, #12]
  return(result);
 8004174:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004176:	2b00      	cmp	r3, #0
 8004178:	d12d      	bne.n	80041d6 <osEventFlagsNew+0x74>
    mem = -1;
 800417a:	f04f 33ff 	mov.w	r3, #4294967295
 800417e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d015      	beq.n	80041b2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <osEventFlagsNew+0x3a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b1f      	cmp	r3, #31
 8004194:	d902      	bls.n	800419c <osEventFlagsNew+0x3a>
        mem = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	e00c      	b.n	80041b6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d108      	bne.n	80041b6 <osEventFlagsNew+0x54>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d104      	bne.n	80041b6 <osEventFlagsNew+0x54>
          mem = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	e001      	b.n	80041b6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d106      	bne.n	80041ca <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 f93b 	bl	800443c <xEventGroupCreateStatic>
 80041c6:	6178      	str	r0, [r7, #20]
 80041c8:	e005      	b.n	80041d6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80041d0:	f000 f96d 	bl	80044ae <xEventGroupCreate>
 80041d4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80041d6:	697b      	ldr	r3, [r7, #20]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	@ 0x28
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041f0:	f3ef 8305 	mrs	r3, IPSR
 80041f4:	613b      	str	r3, [r7, #16]
  return(result);
 80041f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d175      	bne.n	80042e8 <osSemaphoreNew+0x108>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d072      	beq.n	80042e8 <osSemaphoreNew+0x108>
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	429a      	cmp	r2, r3
 8004208:	d86e      	bhi.n	80042e8 <osSemaphoreNew+0x108>
    mem = -1;
 800420a:	f04f 33ff 	mov.w	r3, #4294967295
 800420e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d015      	beq.n	8004242 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d006      	beq.n	800422c <osSemaphoreNew+0x4c>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	2b4f      	cmp	r3, #79	@ 0x4f
 8004224:	d902      	bls.n	800422c <osSemaphoreNew+0x4c>
        mem = 1;
 8004226:	2301      	movs	r3, #1
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	e00c      	b.n	8004246 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d108      	bne.n	8004246 <osSemaphoreNew+0x66>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <osSemaphoreNew+0x66>
          mem = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	e001      	b.n	8004246 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d04c      	beq.n	80042e8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d128      	bne.n	80042a6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10a      	bne.n	8004270 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2203      	movs	r2, #3
 8004260:	9200      	str	r2, [sp, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	2100      	movs	r1, #0
 8004266:	2001      	movs	r0, #1
 8004268:	f000 fa54 	bl	8004714 <xQueueGenericCreateStatic>
 800426c:	61f8      	str	r0, [r7, #28]
 800426e:	e005      	b.n	800427c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004270:	2203      	movs	r2, #3
 8004272:	2100      	movs	r1, #0
 8004274:	2001      	movs	r0, #1
 8004276:	f000 faca 	bl	800480e <xQueueGenericCreate>
 800427a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d022      	beq.n	80042c8 <osSemaphoreNew+0xe8>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01f      	beq.n	80042c8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004288:	2300      	movs	r3, #0
 800428a:	2200      	movs	r2, #0
 800428c:	2100      	movs	r1, #0
 800428e:	69f8      	ldr	r0, [r7, #28]
 8004290:	f000 fb8a 	bl	80049a8 <xQueueGenericSend>
 8004294:	4603      	mov	r3, r0
 8004296:	2b01      	cmp	r3, #1
 8004298:	d016      	beq.n	80042c8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800429a:	69f8      	ldr	r0, [r7, #28]
 800429c:	f000 fe06 	bl	8004eac <vQueueDelete>
            hSemaphore = NULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	e010      	b.n	80042c8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d108      	bne.n	80042be <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	461a      	mov	r2, r3
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fb08 	bl	80048ca <xQueueCreateCountingSemaphoreStatic>
 80042ba:	61f8      	str	r0, [r7, #28]
 80042bc:	e004      	b.n	80042c8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fb3b 	bl	800493c <xQueueCreateCountingSemaphore>
 80042c6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00c      	beq.n	80042e8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <osSemaphoreNew+0xfc>
          name = attr->name;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	e001      	b.n	80042e0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	69f8      	ldr	r0, [r7, #28]
 80042e4:	f000 ff16 	bl	8005114 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80042e8:	69fb      	ldr	r3, [r7, #28]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08a      	sub	sp, #40	@ 0x28
 80042f6:	af02      	add	r7, sp, #8
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004302:	f3ef 8305 	mrs	r3, IPSR
 8004306:	613b      	str	r3, [r7, #16]
  return(result);
 8004308:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800430a:	2b00      	cmp	r3, #0
 800430c:	d15f      	bne.n	80043ce <osMessageQueueNew+0xdc>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05c      	beq.n	80043ce <osMessageQueueNew+0xdc>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d059      	beq.n	80043ce <osMessageQueueNew+0xdc>
    mem = -1;
 800431a:	f04f 33ff 	mov.w	r3, #4294967295
 800431e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d029      	beq.n	800437a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d012      	beq.n	8004354 <osMessageQueueNew+0x62>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b4f      	cmp	r3, #79	@ 0x4f
 8004334:	d90e      	bls.n	8004354 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	429a      	cmp	r2, r3
 800434c:	d302      	bcc.n	8004354 <osMessageQueueNew+0x62>
        mem = 1;
 800434e:	2301      	movs	r3, #1
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	e014      	b.n	800437e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d110      	bne.n	800437e <osMessageQueueNew+0x8c>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10c      	bne.n	800437e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004368:	2b00      	cmp	r3, #0
 800436a:	d108      	bne.n	800437e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d104      	bne.n	800437e <osMessageQueueNew+0x8c>
          mem = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	e001      	b.n	800437e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10b      	bne.n	800439c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2100      	movs	r1, #0
 800438e:	9100      	str	r1, [sp, #0]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f9be 	bl	8004714 <xQueueGenericCreateStatic>
 8004398:	61f8      	str	r0, [r7, #28]
 800439a:	e008      	b.n	80043ae <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80043a2:	2200      	movs	r2, #0
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fa31 	bl	800480e <xQueueGenericCreate>
 80043ac:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00c      	beq.n	80043ce <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e001      	b.n	80043c6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80043c6:	6979      	ldr	r1, [r7, #20]
 80043c8:	69f8      	ldr	r0, [r7, #28]
 80043ca:	f000 fea3 	bl	8005114 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80043ce:	69fb      	ldr	r3, [r7, #28]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a06      	ldr	r2, [pc, #24]	@ (8004400 <vApplicationGetIdleTaskMemory+0x28>)
 80043e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4a05      	ldr	r2, [pc, #20]	@ (8004404 <vApplicationGetIdleTaskMemory+0x2c>)
 80043ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2280      	movs	r2, #128	@ 0x80
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	2000034c 	.word	0x2000034c
 8004404:	200003f4 	.word	0x200003f4

08004408 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a07      	ldr	r2, [pc, #28]	@ (8004434 <vApplicationGetTimerTaskMemory+0x2c>)
 8004418:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4a06      	ldr	r2, [pc, #24]	@ (8004438 <vApplicationGetTimerTaskMemory+0x30>)
 800441e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004426:	601a      	str	r2, [r3, #0]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	200005f4 	.word	0x200005f4
 8004438:	2000069c 	.word	0x2000069c

0800443c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10b      	bne.n	8004462 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	e7fd      	b.n	800445e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004462:	2320      	movs	r3, #32
 8004464:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b20      	cmp	r3, #32
 800446a:	d00b      	beq.n	8004484 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	60fb      	str	r3, [r7, #12]
}
 800447e:	bf00      	nop
 8004480:	bf00      	nop
 8004482:	e7fd      	b.n	8004480 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	3304      	adds	r3, #4
 8004498:	4618      	mov	r0, r3
 800449a:	f000 f822 	bl	80044e2 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2201      	movs	r2, #1
 80044a2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80044a4:	697b      	ldr	r3, [r7, #20]
	}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80044b4:	2020      	movs	r0, #32
 80044b6:	f002 fb33 	bl	8006b20 <pvPortMalloc>
 80044ba:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 f808 	bl	80044e2 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80044d8:	687b      	ldr	r3, [r7, #4]
	}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f103 0208 	add.w	r2, r3, #8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f04f 32ff 	mov.w	r2, #4294967295
 80044fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f103 0208 	add.w	r2, r3, #8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f103 0208 	add.w	r2, r3, #8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr

08004520 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	601a      	str	r2, [r3, #0]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004594:	d103      	bne.n	800459e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e00c      	b.n	80045b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3308      	adds	r3, #8
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	e002      	b.n	80045ac <vListInsert+0x2e>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d2f6      	bcs.n	80045a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045ee:	b480      	push	{r7}
 80045f0:	b085      	sub	sp, #20
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6892      	ldr	r2, [r2, #8]
 8004604:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6852      	ldr	r2, [r2, #4]
 800460e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	429a      	cmp	r2, r3
 8004618:	d103      	bne.n	8004622 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	1e5a      	subs	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <xQueueGenericReset+0x2c>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	60bb      	str	r3, [r7, #8]
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800466c:	f002 f956 	bl	800691c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004678:	68f9      	ldr	r1, [r7, #12]
 800467a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	441a      	add	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469c:	3b01      	subs	r3, #1
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	441a      	add	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	22ff      	movs	r2, #255	@ 0xff
 80046b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	22ff      	movs	r2, #255	@ 0xff
 80046b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d114      	bne.n	80046ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01a      	beq.n	8004700 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3310      	adds	r3, #16
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 fa34 	bl	8005b3c <xTaskRemoveFromEventList>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d012      	beq.n	8004700 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046da:	4b0d      	ldr	r3, [pc, #52]	@ (8004710 <xQueueGenericReset+0xd0>)
 80046dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	e009      	b.n	8004700 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3310      	adds	r3, #16
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff fef6 	bl	80044e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3324      	adds	r3, #36	@ 0x24
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff fef1 	bl	80044e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004700:	f002 f93c 	bl	800697c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004704:	2301      	movs	r3, #1
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	e000ed04 	.word	0xe000ed04

08004714 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08e      	sub	sp, #56	@ 0x38
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10b      	bne.n	8004740 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800473a:	bf00      	nop
 800473c:	bf00      	nop
 800473e:	e7fd      	b.n	800473c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10b      	bne.n	800475e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	e7fd      	b.n	800475a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <xQueueGenericCreateStatic+0x56>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <xQueueGenericCreateStatic+0x5a>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <xQueueGenericCreateStatic+0x5c>
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	623b      	str	r3, [r7, #32]
}
 8004786:	bf00      	nop
 8004788:	bf00      	nop
 800478a:	e7fd      	b.n	8004788 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <xQueueGenericCreateStatic+0x84>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <xQueueGenericCreateStatic+0x88>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <xQueueGenericCreateStatic+0x8a>
 800479c:	2300      	movs	r3, #0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10b      	bne.n	80047ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	61fb      	str	r3, [r7, #28]
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop
 80047b8:	e7fd      	b.n	80047b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047ba:	2350      	movs	r3, #80	@ 0x50
 80047bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b50      	cmp	r3, #80	@ 0x50
 80047c2:	d00b      	beq.n	80047dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	61bb      	str	r3, [r7, #24]
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80047dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80047e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00d      	beq.n	8004804 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80047f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	4613      	mov	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f840 	bl	8004884 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004806:	4618      	mov	r0, r3
 8004808:	3730      	adds	r7, #48	@ 0x30
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800480e:	b580      	push	{r7, lr}
 8004810:	b08a      	sub	sp, #40	@ 0x28
 8004812:	af02      	add	r7, sp, #8
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	4613      	mov	r3, r2
 800481a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	613b      	str	r3, [r7, #16]
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	e7fd      	b.n	8004836 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	3350      	adds	r3, #80	@ 0x50
 8004848:	4618      	mov	r0, r3
 800484a:	f002 f969 	bl	8006b20 <pvPortMalloc>
 800484e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d011      	beq.n	800487a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	3350      	adds	r3, #80	@ 0x50
 800485e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004868:	79fa      	ldrb	r2, [r7, #7]
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	4613      	mov	r3, r2
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f805 	bl	8004884 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800487a:	69bb      	ldr	r3, [r7, #24]
	}
 800487c:	4618      	mov	r0, r3
 800487e:	3720      	adds	r7, #32
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d103      	bne.n	80048a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e002      	b.n	80048a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048b2:	2101      	movs	r1, #1
 80048b4:	69b8      	ldr	r0, [r7, #24]
 80048b6:	f7ff fec3 	bl	8004640 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b08a      	sub	sp, #40	@ 0x28
 80048ce:	af02      	add	r7, sp, #8
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10b      	bne.n	80048f4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	61bb      	str	r3, [r7, #24]
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	e7fd      	b.n	80048f0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d90b      	bls.n	8004914 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	617b      	str	r3, [r7, #20]
}
 800490e:	bf00      	nop
 8004910:	bf00      	nop
 8004912:	e7fd      	b.n	8004910 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004914:	2302      	movs	r3, #2
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	2100      	movs	r1, #0
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff fef8 	bl	8004714 <xQueueGenericCreateStatic>
 8004924:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004932:	69fb      	ldr	r3, [r7, #28]
	}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10b      	bne.n	8004964 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	613b      	str	r3, [r7, #16]
}
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	e7fd      	b.n	8004960 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	d90b      	bls.n	8004984 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	60fb      	str	r3, [r7, #12]
}
 800497e:	bf00      	nop
 8004980:	bf00      	nop
 8004982:	e7fd      	b.n	8004980 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004984:	2202      	movs	r2, #2
 8004986:	2100      	movs	r1, #0
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ff40 	bl	800480e <xQueueGenericCreate>
 800498e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800499c:	697b      	ldr	r3, [r7, #20]
	}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08e      	sub	sp, #56	@ 0x38
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049b6:	2300      	movs	r3, #0
 80049b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <xQueueGenericSend+0x34>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
 80049da:	e7fd      	b.n	80049d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <xQueueGenericSend+0x42>
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <xQueueGenericSend+0x46>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <xQueueGenericSend+0x48>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <xQueueGenericSend+0x64>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d103      	bne.n	8004a1a <xQueueGenericSend+0x72>
 8004a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <xQueueGenericSend+0x76>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <xQueueGenericSend+0x78>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10b      	bne.n	8004a3c <xQueueGenericSend+0x94>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	623b      	str	r3, [r7, #32]
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	e7fd      	b.n	8004a38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a3c:	f001 fa44 	bl	8005ec8 <xTaskGetSchedulerState>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <xQueueGenericSend+0xa4>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <xQueueGenericSend+0xa8>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <xQueueGenericSend+0xaa>
 8004a50:	2300      	movs	r3, #0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <xQueueGenericSend+0xc6>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	61fb      	str	r3, [r7, #28]
}
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	e7fd      	b.n	8004a6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a6e:	f001 ff55 	bl	800691c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d302      	bcc.n	8004a84 <xQueueGenericSend+0xdc>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d129      	bne.n	8004ad8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a8a:	f000 fa33 	bl	8004ef4 <prvCopyDataToQueue>
 8004a8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d010      	beq.n	8004aba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9a:	3324      	adds	r3, #36	@ 0x24
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 f84d 	bl	8005b3c <xTaskRemoveFromEventList>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d013      	beq.n	8004ad0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ba8 <xQueueGenericSend+0x200>)
 8004aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	e00a      	b.n	8004ad0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ac0:	4b39      	ldr	r3, [pc, #228]	@ (8004ba8 <xQueueGenericSend+0x200>)
 8004ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ad0:	f001 ff54 	bl	800697c <vPortExitCritical>
				return pdPASS;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e063      	b.n	8004ba0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ade:	f001 ff4d 	bl	800697c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e05c      	b.n	8004ba0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aec:	f107 0314 	add.w	r3, r7, #20
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 f887 	bl	8005c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004af6:	2301      	movs	r3, #1
 8004af8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004afa:	f001 ff3f 	bl	800697c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004afe:	f000 fdf3 	bl	80056e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b02:	f001 ff0b 	bl	800691c <vPortEnterCritical>
 8004b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b0c:	b25b      	sxtb	r3, r3
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d103      	bne.n	8004b1c <xQueueGenericSend+0x174>
 8004b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b22:	b25b      	sxtb	r3, r3
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d103      	bne.n	8004b32 <xQueueGenericSend+0x18a>
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b32:	f001 ff23 	bl	800697c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b36:	1d3a      	adds	r2, r7, #4
 8004b38:	f107 0314 	add.w	r3, r7, #20
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 f876 	bl	8005c30 <xTaskCheckForTimeOut>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d124      	bne.n	8004b94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b4c:	f000 faca 	bl	80050e4 <prvIsQueueFull>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d018      	beq.n	8004b88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	3310      	adds	r3, #16
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 ff9a 	bl	8005a98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b66:	f000 fa55 	bl	8005014 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b6a:	f000 fdcb 	bl	8005704 <xTaskResumeAll>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f47f af7c 	bne.w	8004a6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004b76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba8 <xQueueGenericSend+0x200>)
 8004b78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	e772      	b.n	8004a6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b8a:	f000 fa43 	bl	8005014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b8e:	f000 fdb9 	bl	8005704 <xTaskResumeAll>
 8004b92:	e76c      	b.n	8004a6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b96:	f000 fa3d 	bl	8005014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b9a:	f000 fdb3 	bl	8005704 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3738      	adds	r7, #56	@ 0x38
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b090      	sub	sp, #64	@ 0x40
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <xQueueGenericSendFromISR+0x3e>
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <xQueueGenericSendFromISR+0x42>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <xQueueGenericSendFromISR+0x44>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d103      	bne.n	8004c1a <xQueueGenericSendFromISR+0x6e>
 8004c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <xQueueGenericSendFromISR+0x72>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <xQueueGenericSendFromISR+0x74>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	623b      	str	r3, [r7, #32]
}
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	e7fd      	b.n	8004c38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c3c:	f001 ff30 	bl	8006aa0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c40:	f3ef 8211 	mrs	r2, BASEPRI
 8004c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	61fa      	str	r2, [r7, #28]
 8004c56:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d302      	bcc.n	8004c6e <xQueueGenericSendFromISR+0xc2>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d12f      	bne.n	8004cce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c84:	f000 f936 	bl	8004ef4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d112      	bne.n	8004cb8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d016      	beq.n	8004cc8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9c:	3324      	adds	r3, #36	@ 0x24
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 ff4c 	bl	8005b3c <xTaskRemoveFromEventList>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00e      	beq.n	8004cc8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00b      	beq.n	8004cc8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e007      	b.n	8004cc8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	b25a      	sxtb	r2, r3
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004ccc:	e001      	b.n	8004cd2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3740      	adds	r7, #64	@ 0x40
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08c      	sub	sp, #48	@ 0x30
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <xQueueReceive+0x32>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	623b      	str	r3, [r7, #32]
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	e7fd      	b.n	8004d16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d103      	bne.n	8004d28 <xQueueReceive+0x40>
 8004d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <xQueueReceive+0x44>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <xQueueReceive+0x46>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10b      	bne.n	8004d4a <xQueueReceive+0x62>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	61fb      	str	r3, [r7, #28]
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	e7fd      	b.n	8004d46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d4a:	f001 f8bd 	bl	8005ec8 <xTaskGetSchedulerState>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <xQueueReceive+0x72>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <xQueueReceive+0x76>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <xQueueReceive+0x78>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10b      	bne.n	8004d7c <xQueueReceive+0x94>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	61bb      	str	r3, [r7, #24]
}
 8004d76:	bf00      	nop
 8004d78:	bf00      	nop
 8004d7a:	e7fd      	b.n	8004d78 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d7c:	f001 fdce 	bl	800691c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01f      	beq.n	8004dcc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d90:	f000 f91a 	bl	8004fc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	1e5a      	subs	r2, r3, #1
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00f      	beq.n	8004dc4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	3310      	adds	r3, #16
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fec7 	bl	8005b3c <xTaskRemoveFromEventList>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004db4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea8 <xQueueReceive+0x1c0>)
 8004db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dc4:	f001 fdda 	bl	800697c <vPortExitCritical>
				return pdPASS;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e069      	b.n	8004ea0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dd2:	f001 fdd3 	bl	800697c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e062      	b.n	8004ea0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004de0:	f107 0310 	add.w	r3, r7, #16
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 ff0d 	bl	8005c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dea:	2301      	movs	r3, #1
 8004dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dee:	f001 fdc5 	bl	800697c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004df2:	f000 fc79 	bl	80056e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004df6:	f001 fd91 	bl	800691c <vPortEnterCritical>
 8004dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e00:	b25b      	sxtb	r3, r3
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d103      	bne.n	8004e10 <xQueueReceive+0x128>
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e16:	b25b      	sxtb	r3, r3
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d103      	bne.n	8004e26 <xQueueReceive+0x13e>
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e26:	f001 fda9 	bl	800697c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e2a:	1d3a      	adds	r2, r7, #4
 8004e2c:	f107 0310 	add.w	r3, r7, #16
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fefc 	bl	8005c30 <xTaskCheckForTimeOut>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d123      	bne.n	8004e86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e40:	f000 f93a 	bl	80050b8 <prvIsQueueEmpty>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d017      	beq.n	8004e7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4c:	3324      	adds	r3, #36	@ 0x24
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fe20 	bl	8005a98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e5a:	f000 f8db 	bl	8005014 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e5e:	f000 fc51 	bl	8005704 <xTaskResumeAll>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d189      	bne.n	8004d7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004e68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea8 <xQueueReceive+0x1c0>)
 8004e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	e780      	b.n	8004d7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e7c:	f000 f8ca 	bl	8005014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e80:	f000 fc40 	bl	8005704 <xTaskResumeAll>
 8004e84:	e77a      	b.n	8004d7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e88:	f000 f8c4 	bl	8005014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e8c:	f000 fc3a 	bl	8005704 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e92:	f000 f911 	bl	80050b8 <prvIsQueueEmpty>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f43f af6f 	beq.w	8004d7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3730      	adds	r7, #48	@ 0x30
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10b      	bne.n	8004ed6 <vQueueDelete+0x2a>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	60bb      	str	r3, [r7, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f944 	bl	8005164 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f001 fee8 	bl	8006cbc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10d      	bne.n	8004f2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d14d      	bne.n	8004fb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fff0 	bl	8005f04 <xTaskPriorityDisinherit>
 8004f24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	e043      	b.n	8004fb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d119      	bne.n	8004f68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6858      	ldr	r0, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	f002 f866 	bl	8007010 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4c:	441a      	add	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d32b      	bcc.n	8004fb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	e026      	b.n	8004fb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68d8      	ldr	r0, [r3, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	461a      	mov	r2, r3
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	f002 f84c 	bl	8007010 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	425b      	negs	r3, r3
 8004f82:	441a      	add	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d207      	bcs.n	8004fa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	425b      	negs	r3, r3
 8004f9e:	441a      	add	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d105      	bne.n	8004fb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004fbe:	697b      	ldr	r3, [r7, #20]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d018      	beq.n	800500c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	441a      	add	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d303      	bcc.n	8004ffc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68d9      	ldr	r1, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005004:	461a      	mov	r2, r3
 8005006:	6838      	ldr	r0, [r7, #0]
 8005008:	f002 f802 	bl	8007010 <memcpy>
	}
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800501c:	f001 fc7e 	bl	800691c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005026:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005028:	e011      	b.n	800504e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	d012      	beq.n	8005058 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3324      	adds	r3, #36	@ 0x24
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fd80 	bl	8005b3c <xTaskRemoveFromEventList>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005042:	f000 fe59 	bl	8005cf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	3b01      	subs	r3, #1
 800504a:	b2db      	uxtb	r3, r3
 800504c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800504e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005052:	2b00      	cmp	r3, #0
 8005054:	dce9      	bgt.n	800502a <prvUnlockQueue+0x16>
 8005056:	e000      	b.n	800505a <prvUnlockQueue+0x46>
					break;
 8005058:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	22ff      	movs	r2, #255	@ 0xff
 800505e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005062:	f001 fc8b 	bl	800697c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005066:	f001 fc59 	bl	800691c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005070:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005072:	e011      	b.n	8005098 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d012      	beq.n	80050a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3310      	adds	r3, #16
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fd5b 	bl	8005b3c <xTaskRemoveFromEventList>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800508c:	f000 fe34 	bl	8005cf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005090:	7bbb      	ldrb	r3, [r7, #14]
 8005092:	3b01      	subs	r3, #1
 8005094:	b2db      	uxtb	r3, r3
 8005096:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800509c:	2b00      	cmp	r3, #0
 800509e:	dce9      	bgt.n	8005074 <prvUnlockQueue+0x60>
 80050a0:	e000      	b.n	80050a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	22ff      	movs	r2, #255	@ 0xff
 80050a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80050ac:	f001 fc66 	bl	800697c <vPortExitCritical>
}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050c0:	f001 fc2c 	bl	800691c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050cc:	2301      	movs	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e001      	b.n	80050d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050d6:	f001 fc51 	bl	800697c <vPortExitCritical>

	return xReturn;
 80050da:	68fb      	ldr	r3, [r7, #12]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050ec:	f001 fc16 	bl	800691c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d102      	bne.n	8005102 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e001      	b.n	8005106 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005106:	f001 fc39 	bl	800697c <vPortExitCritical>

	return xReturn;
 800510a:	68fb      	ldr	r3, [r7, #12]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	e014      	b.n	800514e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005124:	4a0e      	ldr	r2, [pc, #56]	@ (8005160 <vQueueAddToRegistry+0x4c>)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005130:	490b      	ldr	r1, [pc, #44]	@ (8005160 <vQueueAddToRegistry+0x4c>)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800513a:	4a09      	ldr	r2, [pc, #36]	@ (8005160 <vQueueAddToRegistry+0x4c>)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005146:	e006      	b.n	8005156 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b07      	cmp	r3, #7
 8005152:	d9e7      	bls.n	8005124 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr
 8005160:	20000a9c 	.word	0x20000a9c

08005164 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	e016      	b.n	80051a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005172:	4a10      	ldr	r2, [pc, #64]	@ (80051b4 <vQueueUnregisterQueue+0x50>)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4413      	add	r3, r2
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	429a      	cmp	r2, r3
 8005180:	d10b      	bne.n	800519a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005182:	4a0c      	ldr	r2, [pc, #48]	@ (80051b4 <vQueueUnregisterQueue+0x50>)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2100      	movs	r1, #0
 8005188:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800518c:	4a09      	ldr	r2, [pc, #36]	@ (80051b4 <vQueueUnregisterQueue+0x50>)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4413      	add	r3, r2
 8005194:	2200      	movs	r2, #0
 8005196:	605a      	str	r2, [r3, #4]
				break;
 8005198:	e006      	b.n	80051a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3301      	adds	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b07      	cmp	r3, #7
 80051a4:	d9e5      	bls.n	8005172 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000a9c 	.word	0x20000a9c

080051b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051c8:	f001 fba8 	bl	800691c <vPortEnterCritical>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051d2:	b25b      	sxtb	r3, r3
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d103      	bne.n	80051e2 <vQueueWaitForMessageRestricted+0x2a>
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051e8:	b25b      	sxtb	r3, r3
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d103      	bne.n	80051f8 <vQueueWaitForMessageRestricted+0x40>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051f8:	f001 fbc0 	bl	800697c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	2b00      	cmp	r3, #0
 8005202:	d106      	bne.n	8005212 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	3324      	adds	r3, #36	@ 0x24
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fc69 	bl	8005ae4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005212:	6978      	ldr	r0, [r7, #20]
 8005214:	f7ff fefe 	bl	8005014 <prvUnlockQueue>
	}
 8005218:	bf00      	nop
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08e      	sub	sp, #56	@ 0x38
 8005224:	af04      	add	r7, sp, #16
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800522e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10b      	bne.n	800524c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	623b      	str	r3, [r7, #32]
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	e7fd      	b.n	8005248 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800524c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10b      	bne.n	800526a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	61fb      	str	r3, [r7, #28]
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	e7fd      	b.n	8005266 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800526a:	23a8      	movs	r3, #168	@ 0xa8
 800526c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2ba8      	cmp	r3, #168	@ 0xa8
 8005272:	d00b      	beq.n	800528c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	61bb      	str	r3, [r7, #24]
}
 8005286:	bf00      	nop
 8005288:	bf00      	nop
 800528a:	e7fd      	b.n	8005288 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800528c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01e      	beq.n	80052d2 <xTaskCreateStatic+0xb2>
 8005294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01b      	beq.n	80052d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800529a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052ac:	2300      	movs	r3, #0
 80052ae:	9303      	str	r3, [sp, #12]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	9302      	str	r3, [sp, #8]
 80052b4:	f107 0314 	add.w	r3, r7, #20
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f851 	bl	800536c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052cc:	f000 f8f6 	bl	80054bc <prvAddNewTaskToReadyList>
 80052d0:	e001      	b.n	80052d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052d6:	697b      	ldr	r3, [r7, #20]
	}
 80052d8:	4618      	mov	r0, r3
 80052da:	3728      	adds	r7, #40	@ 0x28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08c      	sub	sp, #48	@ 0x30
 80052e4:	af04      	add	r7, sp, #16
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f001 fc13 	bl	8006b20 <pvPortMalloc>
 80052fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00e      	beq.n	8005320 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005302:	20a8      	movs	r0, #168	@ 0xa8
 8005304:	f001 fc0c 	bl	8006b20 <pvPortMalloc>
 8005308:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	631a      	str	r2, [r3, #48]	@ 0x30
 8005316:	e005      	b.n	8005324 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005318:	6978      	ldr	r0, [r7, #20]
 800531a:	f001 fccf 	bl	8006cbc <vPortFree>
 800531e:	e001      	b.n	8005324 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d017      	beq.n	800535a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005332:	88fa      	ldrh	r2, [r7, #6]
 8005334:	2300      	movs	r3, #0
 8005336:	9303      	str	r3, [sp, #12]
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	9302      	str	r3, [sp, #8]
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f80f 	bl	800536c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800534e:	69f8      	ldr	r0, [r7, #28]
 8005350:	f000 f8b4 	bl	80054bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005354:	2301      	movs	r3, #1
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	e002      	b.n	8005360 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295
 800535e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005360:	69bb      	ldr	r3, [r7, #24]
	}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800537a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	461a      	mov	r2, r3
 8005384:	21a5      	movs	r1, #165	@ 0xa5
 8005386:	f001 fdb7 	bl	8006ef8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005394:	3b01      	subs	r3, #1
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f023 0307 	bic.w	r3, r3, #7
 80053a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	617b      	str	r3, [r7, #20]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01f      	beq.n	800540c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053cc:	2300      	movs	r3, #0
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	e012      	b.n	80053f8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	7819      	ldrb	r1, [r3, #0]
 80053da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	4413      	add	r3, r2
 80053e0:	3334      	adds	r3, #52	@ 0x34
 80053e2:	460a      	mov	r2, r1
 80053e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	4413      	add	r3, r2
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d006      	beq.n	8005400 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3301      	adds	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b0f      	cmp	r3, #15
 80053fc:	d9e9      	bls.n	80053d2 <prvInitialiseNewTask+0x66>
 80053fe:	e000      	b.n	8005402 <prvInitialiseNewTask+0x96>
			{
				break;
 8005400:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800540a:	e003      	b.n	8005414 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800540c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	2b37      	cmp	r3, #55	@ 0x37
 8005418:	d901      	bls.n	800541e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800541a:	2337      	movs	r3, #55	@ 0x37
 800541c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005420:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005422:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005426:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005428:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800542a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542c:	2200      	movs	r2, #0
 800542e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005432:	3304      	adds	r3, #4
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff f873 	bl	8004520 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543c:	3318      	adds	r3, #24
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff f86e 	bl	8004520 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005448:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005452:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005458:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545c:	2200      	movs	r2, #0
 800545e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	2200      	movs	r2, #0
 8005466:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	3354      	adds	r3, #84	@ 0x54
 800546e:	224c      	movs	r2, #76	@ 0x4c
 8005470:	2100      	movs	r1, #0
 8005472:	4618      	mov	r0, r3
 8005474:	f001 fd40 	bl	8006ef8 <memset>
 8005478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547a:	4a0d      	ldr	r2, [pc, #52]	@ (80054b0 <prvInitialiseNewTask+0x144>)
 800547c:	659a      	str	r2, [r3, #88]	@ 0x58
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	4a0c      	ldr	r2, [pc, #48]	@ (80054b4 <prvInitialiseNewTask+0x148>)
 8005482:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	4a0c      	ldr	r2, [pc, #48]	@ (80054b8 <prvInitialiseNewTask+0x14c>)
 8005488:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	69b8      	ldr	r0, [r7, #24]
 8005490:	f001 f954 	bl	800673c <pxPortInitialiseStack>
 8005494:	4602      	mov	r2, r0
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054a6:	bf00      	nop
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20001d30 	.word	0x20001d30
 80054b4:	20001d98 	.word	0x20001d98
 80054b8:	20001e00 	.word	0x20001e00

080054bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054c4:	f001 fa2a 	bl	800691c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005580 <prvAddNewTaskToReadyList+0xc4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005580 <prvAddNewTaskToReadyList+0xc4>)
 80054d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005584 <prvAddNewTaskToReadyList+0xc8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d109      	bne.n	80054ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054da:	4a2a      	ldr	r2, [pc, #168]	@ (8005584 <prvAddNewTaskToReadyList+0xc8>)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054e0:	4b27      	ldr	r3, [pc, #156]	@ (8005580 <prvAddNewTaskToReadyList+0xc4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d110      	bne.n	800550a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054e8:	f000 fc2a 	bl	8005d40 <prvInitialiseTaskLists>
 80054ec:	e00d      	b.n	800550a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054ee:	4b26      	ldr	r3, [pc, #152]	@ (8005588 <prvAddNewTaskToReadyList+0xcc>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054f6:	4b23      	ldr	r3, [pc, #140]	@ (8005584 <prvAddNewTaskToReadyList+0xc8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005500:	429a      	cmp	r2, r3
 8005502:	d802      	bhi.n	800550a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005504:	4a1f      	ldr	r2, [pc, #124]	@ (8005584 <prvAddNewTaskToReadyList+0xc8>)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800550a:	4b20      	ldr	r3, [pc, #128]	@ (800558c <prvAddNewTaskToReadyList+0xd0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3301      	adds	r3, #1
 8005510:	4a1e      	ldr	r2, [pc, #120]	@ (800558c <prvAddNewTaskToReadyList+0xd0>)
 8005512:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005514:	4b1d      	ldr	r3, [pc, #116]	@ (800558c <prvAddNewTaskToReadyList+0xd0>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005520:	4b1b      	ldr	r3, [pc, #108]	@ (8005590 <prvAddNewTaskToReadyList+0xd4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d903      	bls.n	8005530 <prvAddNewTaskToReadyList+0x74>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552c:	4a18      	ldr	r2, [pc, #96]	@ (8005590 <prvAddNewTaskToReadyList+0xd4>)
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <prvAddNewTaskToReadyList+0xd8>)
 800553e:	441a      	add	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3304      	adds	r3, #4
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f7fe fff6 	bl	8004538 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800554c:	f001 fa16 	bl	800697c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005550:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <prvAddNewTaskToReadyList+0xcc>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00e      	beq.n	8005576 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005558:	4b0a      	ldr	r3, [pc, #40]	@ (8005584 <prvAddNewTaskToReadyList+0xc8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	429a      	cmp	r2, r3
 8005564:	d207      	bcs.n	8005576 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005566:	4b0c      	ldr	r3, [pc, #48]	@ (8005598 <prvAddNewTaskToReadyList+0xdc>)
 8005568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005576:	bf00      	nop
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000fb0 	.word	0x20000fb0
 8005584:	20000adc 	.word	0x20000adc
 8005588:	20000fbc 	.word	0x20000fbc
 800558c:	20000fcc 	.word	0x20000fcc
 8005590:	20000fb8 	.word	0x20000fb8
 8005594:	20000ae0 	.word	0x20000ae0
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d018      	beq.n	80055e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055ae:	4b14      	ldr	r3, [pc, #80]	@ (8005600 <vTaskDelay+0x64>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00b      	beq.n	80055ce <vTaskDelay+0x32>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	60bb      	str	r3, [r7, #8]
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055ce:	f000 f88b 	bl	80056e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055d2:	2100      	movs	r1, #0
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fd05 	bl	8005fe4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055da:	f000 f893 	bl	8005704 <xTaskResumeAll>
 80055de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80055e6:	4b07      	ldr	r3, [pc, #28]	@ (8005604 <vTaskDelay+0x68>)
 80055e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055f6:	bf00      	nop
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000fd8 	.word	0x20000fd8
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	@ 0x28
 800560c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005616:	463a      	mov	r2, r7
 8005618:	1d39      	adds	r1, r7, #4
 800561a:	f107 0308 	add.w	r3, r7, #8
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe feda 	bl	80043d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	9202      	str	r2, [sp, #8]
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	2300      	movs	r3, #0
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	2300      	movs	r3, #0
 8005634:	460a      	mov	r2, r1
 8005636:	4924      	ldr	r1, [pc, #144]	@ (80056c8 <vTaskStartScheduler+0xc0>)
 8005638:	4824      	ldr	r0, [pc, #144]	@ (80056cc <vTaskStartScheduler+0xc4>)
 800563a:	f7ff fdf1 	bl	8005220 <xTaskCreateStatic>
 800563e:	4603      	mov	r3, r0
 8005640:	4a23      	ldr	r2, [pc, #140]	@ (80056d0 <vTaskStartScheduler+0xc8>)
 8005642:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005644:	4b22      	ldr	r3, [pc, #136]	@ (80056d0 <vTaskStartScheduler+0xc8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800564c:	2301      	movs	r3, #1
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	e001      	b.n	8005656 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d102      	bne.n	8005662 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800565c:	f000 fd16 	bl	800608c <xTimerCreateTimerTask>
 8005660:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d11b      	bne.n	80056a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	613b      	str	r3, [r7, #16]
}
 800567a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800567c:	4b15      	ldr	r3, [pc, #84]	@ (80056d4 <vTaskStartScheduler+0xcc>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3354      	adds	r3, #84	@ 0x54
 8005682:	4a15      	ldr	r2, [pc, #84]	@ (80056d8 <vTaskStartScheduler+0xd0>)
 8005684:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005686:	4b15      	ldr	r3, [pc, #84]	@ (80056dc <vTaskStartScheduler+0xd4>)
 8005688:	f04f 32ff 	mov.w	r2, #4294967295
 800568c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800568e:	4b14      	ldr	r3, [pc, #80]	@ (80056e0 <vTaskStartScheduler+0xd8>)
 8005690:	2201      	movs	r2, #1
 8005692:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005694:	4b13      	ldr	r3, [pc, #76]	@ (80056e4 <vTaskStartScheduler+0xdc>)
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800569a:	f001 f8cd 	bl	8006838 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800569e:	e00f      	b.n	80056c0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d10b      	bne.n	80056c0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	60fb      	str	r3, [r7, #12]
}
 80056ba:	bf00      	nop
 80056bc:	bf00      	nop
 80056be:	e7fd      	b.n	80056bc <vTaskStartScheduler+0xb4>
}
 80056c0:	bf00      	nop
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	08007158 	.word	0x08007158
 80056cc:	08005d11 	.word	0x08005d11
 80056d0:	20000fd4 	.word	0x20000fd4
 80056d4:	20000adc 	.word	0x20000adc
 80056d8:	20000010 	.word	0x20000010
 80056dc:	20000fd0 	.word	0x20000fd0
 80056e0:	20000fbc 	.word	0x20000fbc
 80056e4:	20000fb4 	.word	0x20000fb4

080056e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80056ec:	4b04      	ldr	r3, [pc, #16]	@ (8005700 <vTaskSuspendAll+0x18>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3301      	adds	r3, #1
 80056f2:	4a03      	ldr	r2, [pc, #12]	@ (8005700 <vTaskSuspendAll+0x18>)
 80056f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056f6:	bf00      	nop
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bc80      	pop	{r7}
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20000fd8 	.word	0x20000fd8

08005704 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005712:	4b42      	ldr	r3, [pc, #264]	@ (800581c <xTaskResumeAll+0x118>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10b      	bne.n	8005732 <xTaskResumeAll+0x2e>
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	603b      	str	r3, [r7, #0]
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	e7fd      	b.n	800572e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005732:	f001 f8f3 	bl	800691c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005736:	4b39      	ldr	r3, [pc, #228]	@ (800581c <xTaskResumeAll+0x118>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3b01      	subs	r3, #1
 800573c:	4a37      	ldr	r2, [pc, #220]	@ (800581c <xTaskResumeAll+0x118>)
 800573e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005740:	4b36      	ldr	r3, [pc, #216]	@ (800581c <xTaskResumeAll+0x118>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d162      	bne.n	800580e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005748:	4b35      	ldr	r3, [pc, #212]	@ (8005820 <xTaskResumeAll+0x11c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d05e      	beq.n	800580e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005750:	e02f      	b.n	80057b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005752:	4b34      	ldr	r3, [pc, #208]	@ (8005824 <xTaskResumeAll+0x120>)
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3318      	adds	r3, #24
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe ff45 	bl	80045ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3304      	adds	r3, #4
 8005768:	4618      	mov	r0, r3
 800576a:	f7fe ff40 	bl	80045ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005772:	4b2d      	ldr	r3, [pc, #180]	@ (8005828 <xTaskResumeAll+0x124>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d903      	bls.n	8005782 <xTaskResumeAll+0x7e>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	4a2a      	ldr	r2, [pc, #168]	@ (8005828 <xTaskResumeAll+0x124>)
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4a27      	ldr	r2, [pc, #156]	@ (800582c <xTaskResumeAll+0x128>)
 8005790:	441a      	add	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3304      	adds	r3, #4
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f7fe fecd 	bl	8004538 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a2:	4b23      	ldr	r3, [pc, #140]	@ (8005830 <xTaskResumeAll+0x12c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d302      	bcc.n	80057b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80057ac:	4b21      	ldr	r3, [pc, #132]	@ (8005834 <xTaskResumeAll+0x130>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005824 <xTaskResumeAll+0x120>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1cb      	bne.n	8005752 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057c0:	f000 fb62 	bl	8005e88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005838 <xTaskResumeAll+0x134>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d010      	beq.n	80057f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057d0:	f000 f844 	bl	800585c <xTaskIncrementTick>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80057da:	4b16      	ldr	r3, [pc, #88]	@ (8005834 <xTaskResumeAll+0x130>)
 80057dc:	2201      	movs	r2, #1
 80057de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f1      	bne.n	80057d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80057ec:	4b12      	ldr	r3, [pc, #72]	@ (8005838 <xTaskResumeAll+0x134>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057f2:	4b10      	ldr	r3, [pc, #64]	@ (8005834 <xTaskResumeAll+0x130>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057fa:	2301      	movs	r3, #1
 80057fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057fe:	4b0f      	ldr	r3, [pc, #60]	@ (800583c <xTaskResumeAll+0x138>)
 8005800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800580e:	f001 f8b5 	bl	800697c <vPortExitCritical>

	return xAlreadyYielded;
 8005812:	68bb      	ldr	r3, [r7, #8]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20000fd8 	.word	0x20000fd8
 8005820:	20000fb0 	.word	0x20000fb0
 8005824:	20000f70 	.word	0x20000f70
 8005828:	20000fb8 	.word	0x20000fb8
 800582c:	20000ae0 	.word	0x20000ae0
 8005830:	20000adc 	.word	0x20000adc
 8005834:	20000fc4 	.word	0x20000fc4
 8005838:	20000fc0 	.word	0x20000fc0
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005846:	4b04      	ldr	r3, [pc, #16]	@ (8005858 <xTaskGetTickCount+0x18>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800584c:	687b      	ldr	r3, [r7, #4]
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr
 8005858:	20000fb4 	.word	0x20000fb4

0800585c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005866:	4b4f      	ldr	r3, [pc, #316]	@ (80059a4 <xTaskIncrementTick+0x148>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	f040 8090 	bne.w	8005990 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005870:	4b4d      	ldr	r3, [pc, #308]	@ (80059a8 <xTaskIncrementTick+0x14c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005878:	4a4b      	ldr	r2, [pc, #300]	@ (80059a8 <xTaskIncrementTick+0x14c>)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d121      	bne.n	80058c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005884:	4b49      	ldr	r3, [pc, #292]	@ (80059ac <xTaskIncrementTick+0x150>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	603b      	str	r3, [r7, #0]
}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	e7fd      	b.n	80058a2 <xTaskIncrementTick+0x46>
 80058a6:	4b41      	ldr	r3, [pc, #260]	@ (80059ac <xTaskIncrementTick+0x150>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	4b40      	ldr	r3, [pc, #256]	@ (80059b0 <xTaskIncrementTick+0x154>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a3e      	ldr	r2, [pc, #248]	@ (80059ac <xTaskIncrementTick+0x150>)
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	4a3e      	ldr	r2, [pc, #248]	@ (80059b0 <xTaskIncrementTick+0x154>)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	4b3e      	ldr	r3, [pc, #248]	@ (80059b4 <xTaskIncrementTick+0x158>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3301      	adds	r3, #1
 80058c0:	4a3c      	ldr	r2, [pc, #240]	@ (80059b4 <xTaskIncrementTick+0x158>)
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	f000 fae0 	bl	8005e88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058c8:	4b3b      	ldr	r3, [pc, #236]	@ (80059b8 <xTaskIncrementTick+0x15c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d349      	bcc.n	8005966 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058d2:	4b36      	ldr	r3, [pc, #216]	@ (80059ac <xTaskIncrementTick+0x150>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d104      	bne.n	80058e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058dc:	4b36      	ldr	r3, [pc, #216]	@ (80059b8 <xTaskIncrementTick+0x15c>)
 80058de:	f04f 32ff 	mov.w	r2, #4294967295
 80058e2:	601a      	str	r2, [r3, #0]
					break;
 80058e4:	e03f      	b.n	8005966 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058e6:	4b31      	ldr	r3, [pc, #196]	@ (80059ac <xTaskIncrementTick+0x150>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d203      	bcs.n	8005906 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058fe:	4a2e      	ldr	r2, [pc, #184]	@ (80059b8 <xTaskIncrementTick+0x15c>)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005904:	e02f      	b.n	8005966 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	3304      	adds	r3, #4
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe fe6f 	bl	80045ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005914:	2b00      	cmp	r3, #0
 8005916:	d004      	beq.n	8005922 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	3318      	adds	r3, #24
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe fe66 	bl	80045ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005926:	4b25      	ldr	r3, [pc, #148]	@ (80059bc <xTaskIncrementTick+0x160>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d903      	bls.n	8005936 <xTaskIncrementTick+0xda>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	4a22      	ldr	r2, [pc, #136]	@ (80059bc <xTaskIncrementTick+0x160>)
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4a1f      	ldr	r2, [pc, #124]	@ (80059c0 <xTaskIncrementTick+0x164>)
 8005944:	441a      	add	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	3304      	adds	r3, #4
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f7fe fdf3 	bl	8004538 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005956:	4b1b      	ldr	r3, [pc, #108]	@ (80059c4 <xTaskIncrementTick+0x168>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595c:	429a      	cmp	r2, r3
 800595e:	d3b8      	bcc.n	80058d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005960:	2301      	movs	r3, #1
 8005962:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005964:	e7b5      	b.n	80058d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005966:	4b17      	ldr	r3, [pc, #92]	@ (80059c4 <xTaskIncrementTick+0x168>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800596c:	4914      	ldr	r1, [pc, #80]	@ (80059c0 <xTaskIncrementTick+0x164>)
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d901      	bls.n	8005982 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800597e:	2301      	movs	r3, #1
 8005980:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005982:	4b11      	ldr	r3, [pc, #68]	@ (80059c8 <xTaskIncrementTick+0x16c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800598a:	2301      	movs	r3, #1
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	e004      	b.n	800599a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005990:	4b0e      	ldr	r3, [pc, #56]	@ (80059cc <xTaskIncrementTick+0x170>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3301      	adds	r3, #1
 8005996:	4a0d      	ldr	r2, [pc, #52]	@ (80059cc <xTaskIncrementTick+0x170>)
 8005998:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800599a:	697b      	ldr	r3, [r7, #20]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	20000fd8 	.word	0x20000fd8
 80059a8:	20000fb4 	.word	0x20000fb4
 80059ac:	20000f68 	.word	0x20000f68
 80059b0:	20000f6c 	.word	0x20000f6c
 80059b4:	20000fc8 	.word	0x20000fc8
 80059b8:	20000fd0 	.word	0x20000fd0
 80059bc:	20000fb8 	.word	0x20000fb8
 80059c0:	20000ae0 	.word	0x20000ae0
 80059c4:	20000adc 	.word	0x20000adc
 80059c8:	20000fc4 	.word	0x20000fc4
 80059cc:	20000fc0 	.word	0x20000fc0

080059d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a80 <vTaskSwitchContext+0xb0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059de:	4b29      	ldr	r3, [pc, #164]	@ (8005a84 <vTaskSwitchContext+0xb4>)
 80059e0:	2201      	movs	r2, #1
 80059e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059e4:	e047      	b.n	8005a76 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80059e6:	4b27      	ldr	r3, [pc, #156]	@ (8005a84 <vTaskSwitchContext+0xb4>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ec:	4b26      	ldr	r3, [pc, #152]	@ (8005a88 <vTaskSwitchContext+0xb8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e011      	b.n	8005a18 <vTaskSwitchContext+0x48>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <vTaskSwitchContext+0x42>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	607b      	str	r3, [r7, #4]
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	e7fd      	b.n	8005a0e <vTaskSwitchContext+0x3e>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	491c      	ldr	r1, [pc, #112]	@ (8005a8c <vTaskSwitchContext+0xbc>)
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0e3      	beq.n	80059f4 <vTaskSwitchContext+0x24>
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4a15      	ldr	r2, [pc, #84]	@ (8005a8c <vTaskSwitchContext+0xbc>)
 8005a38:	4413      	add	r3, r2
 8005a3a:	60bb      	str	r3, [r7, #8]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d104      	bne.n	8005a5c <vTaskSwitchContext+0x8c>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	605a      	str	r2, [r3, #4]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	4a0b      	ldr	r2, [pc, #44]	@ (8005a90 <vTaskSwitchContext+0xc0>)
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4a08      	ldr	r2, [pc, #32]	@ (8005a88 <vTaskSwitchContext+0xb8>)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a6c:	4b08      	ldr	r3, [pc, #32]	@ (8005a90 <vTaskSwitchContext+0xc0>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3354      	adds	r3, #84	@ 0x54
 8005a72:	4a08      	ldr	r2, [pc, #32]	@ (8005a94 <vTaskSwitchContext+0xc4>)
 8005a74:	6013      	str	r3, [r2, #0]
}
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr
 8005a80:	20000fd8 	.word	0x20000fd8
 8005a84:	20000fc4 	.word	0x20000fc4
 8005a88:	20000fb8 	.word	0x20000fb8
 8005a8c:	20000ae0 	.word	0x20000ae0
 8005a90:	20000adc 	.word	0x20000adc
 8005a94:	20000010 	.word	0x20000010

08005a98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10b      	bne.n	8005ac0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	60fb      	str	r3, [r7, #12]
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	e7fd      	b.n	8005abc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ac0:	4b07      	ldr	r3, [pc, #28]	@ (8005ae0 <vTaskPlaceOnEventList+0x48>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3318      	adds	r3, #24
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7fe fd58 	bl	800457e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ace:	2101      	movs	r1, #1
 8005ad0:	6838      	ldr	r0, [r7, #0]
 8005ad2:	f000 fa87 	bl	8005fe4 <prvAddCurrentTaskToDelayedList>
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000adc 	.word	0x20000adc

08005ae4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10b      	bne.n	8005b0e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	617b      	str	r3, [r7, #20]
}
 8005b08:	bf00      	nop
 8005b0a:	bf00      	nop
 8005b0c:	e7fd      	b.n	8005b0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b38 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3318      	adds	r3, #24
 8005b14:	4619      	mov	r1, r3
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f7fe fd0e 	bl	8004538 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005b22:	f04f 33ff 	mov.w	r3, #4294967295
 8005b26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	68b8      	ldr	r0, [r7, #8]
 8005b2c:	f000 fa5a 	bl	8005fe4 <prvAddCurrentTaskToDelayedList>
	}
 8005b30:	bf00      	nop
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000adc 	.word	0x20000adc

08005b3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10b      	bne.n	8005b6a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	60fb      	str	r3, [r7, #12]
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	e7fd      	b.n	8005b66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	3318      	adds	r3, #24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fd3d 	bl	80045ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b74:	4b1d      	ldr	r3, [pc, #116]	@ (8005bec <xTaskRemoveFromEventList+0xb0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11d      	bne.n	8005bb8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fe fd34 	bl	80045ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8a:	4b19      	ldr	r3, [pc, #100]	@ (8005bf0 <xTaskRemoveFromEventList+0xb4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d903      	bls.n	8005b9a <xTaskRemoveFromEventList+0x5e>
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b96:	4a16      	ldr	r2, [pc, #88]	@ (8005bf0 <xTaskRemoveFromEventList+0xb4>)
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4a13      	ldr	r2, [pc, #76]	@ (8005bf4 <xTaskRemoveFromEventList+0xb8>)
 8005ba8:	441a      	add	r2, r3
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	f7fe fcc1 	bl	8004538 <vListInsertEnd>
 8005bb6:	e005      	b.n	8005bc4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	3318      	adds	r3, #24
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	480e      	ldr	r0, [pc, #56]	@ (8005bf8 <xTaskRemoveFromEventList+0xbc>)
 8005bc0:	f7fe fcba 	bl	8004538 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005bfc <xTaskRemoveFromEventList+0xc0>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d905      	bls.n	8005bde <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c00 <xTaskRemoveFromEventList+0xc4>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	e001      	b.n	8005be2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005be2:	697b      	ldr	r3, [r7, #20]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000fd8 	.word	0x20000fd8
 8005bf0:	20000fb8 	.word	0x20000fb8
 8005bf4:	20000ae0 	.word	0x20000ae0
 8005bf8:	20000f70 	.word	0x20000f70
 8005bfc:	20000adc 	.word	0x20000adc
 8005c00:	20000fc4 	.word	0x20000fc4

08005c04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c0c:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <vTaskInternalSetTimeOutState+0x24>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c14:	4b05      	ldr	r3, [pc, #20]	@ (8005c2c <vTaskInternalSetTimeOutState+0x28>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	605a      	str	r2, [r3, #4]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	20000fc8 	.word	0x20000fc8
 8005c2c:	20000fb4 	.word	0x20000fb4

08005c30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10b      	bne.n	8005c58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	613b      	str	r3, [r7, #16]
}
 8005c52:	bf00      	nop
 8005c54:	bf00      	nop
 8005c56:	e7fd      	b.n	8005c54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	60fb      	str	r3, [r7, #12]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005c76:	f000 fe51 	bl	800691c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf0 <xTaskCheckForTimeOut+0xc0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c92:	d102      	bne.n	8005c9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61fb      	str	r3, [r7, #28]
 8005c98:	e023      	b.n	8005ce2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4b15      	ldr	r3, [pc, #84]	@ (8005cf4 <xTaskCheckForTimeOut+0xc4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d007      	beq.n	8005cb6 <xTaskCheckForTimeOut+0x86>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d302      	bcc.n	8005cb6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	e015      	b.n	8005ce2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d20b      	bcs.n	8005cd8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1ad2      	subs	r2, r2, r3
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff ff99 	bl	8005c04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	e004      	b.n	8005ce2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ce2:	f000 fe4b 	bl	800697c <vPortExitCritical>

	return xReturn;
 8005ce6:	69fb      	ldr	r3, [r7, #28]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000fb4 	.word	0x20000fb4
 8005cf4:	20000fc8 	.word	0x20000fc8

08005cf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cfc:	4b03      	ldr	r3, [pc, #12]	@ (8005d0c <vTaskMissedYield+0x14>)
 8005cfe:	2201      	movs	r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
}
 8005d02:	bf00      	nop
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000fc4 	.word	0x20000fc4

08005d10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d18:	f000 f852 	bl	8005dc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d1c:	4b06      	ldr	r3, [pc, #24]	@ (8005d38 <prvIdleTask+0x28>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d9f9      	bls.n	8005d18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d24:	4b05      	ldr	r3, [pc, #20]	@ (8005d3c <prvIdleTask+0x2c>)
 8005d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d34:	e7f0      	b.n	8005d18 <prvIdleTask+0x8>
 8005d36:	bf00      	nop
 8005d38:	20000ae0 	.word	0x20000ae0
 8005d3c:	e000ed04 	.word	0xe000ed04

08005d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
 8005d4a:	e00c      	b.n	8005d66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4a12      	ldr	r2, [pc, #72]	@ (8005da0 <prvInitialiseTaskLists+0x60>)
 8005d58:	4413      	add	r3, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe fbc1 	bl	80044e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3301      	adds	r3, #1
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b37      	cmp	r3, #55	@ 0x37
 8005d6a:	d9ef      	bls.n	8005d4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d6c:	480d      	ldr	r0, [pc, #52]	@ (8005da4 <prvInitialiseTaskLists+0x64>)
 8005d6e:	f7fe fbb8 	bl	80044e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d72:	480d      	ldr	r0, [pc, #52]	@ (8005da8 <prvInitialiseTaskLists+0x68>)
 8005d74:	f7fe fbb5 	bl	80044e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d78:	480c      	ldr	r0, [pc, #48]	@ (8005dac <prvInitialiseTaskLists+0x6c>)
 8005d7a:	f7fe fbb2 	bl	80044e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d7e:	480c      	ldr	r0, [pc, #48]	@ (8005db0 <prvInitialiseTaskLists+0x70>)
 8005d80:	f7fe fbaf 	bl	80044e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d84:	480b      	ldr	r0, [pc, #44]	@ (8005db4 <prvInitialiseTaskLists+0x74>)
 8005d86:	f7fe fbac 	bl	80044e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005db8 <prvInitialiseTaskLists+0x78>)
 8005d8c:	4a05      	ldr	r2, [pc, #20]	@ (8005da4 <prvInitialiseTaskLists+0x64>)
 8005d8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d90:	4b0a      	ldr	r3, [pc, #40]	@ (8005dbc <prvInitialiseTaskLists+0x7c>)
 8005d92:	4a05      	ldr	r2, [pc, #20]	@ (8005da8 <prvInitialiseTaskLists+0x68>)
 8005d94:	601a      	str	r2, [r3, #0]
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000ae0 	.word	0x20000ae0
 8005da4:	20000f40 	.word	0x20000f40
 8005da8:	20000f54 	.word	0x20000f54
 8005dac:	20000f70 	.word	0x20000f70
 8005db0:	20000f84 	.word	0x20000f84
 8005db4:	20000f9c 	.word	0x20000f9c
 8005db8:	20000f68 	.word	0x20000f68
 8005dbc:	20000f6c 	.word	0x20000f6c

08005dc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dc6:	e019      	b.n	8005dfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005dc8:	f000 fda8 	bl	800691c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dcc:	4b10      	ldr	r3, [pc, #64]	@ (8005e10 <prvCheckTasksWaitingTermination+0x50>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe fc08 	bl	80045ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dde:	4b0d      	ldr	r3, [pc, #52]	@ (8005e14 <prvCheckTasksWaitingTermination+0x54>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	4a0b      	ldr	r2, [pc, #44]	@ (8005e14 <prvCheckTasksWaitingTermination+0x54>)
 8005de6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005de8:	4b0b      	ldr	r3, [pc, #44]	@ (8005e18 <prvCheckTasksWaitingTermination+0x58>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	4a0a      	ldr	r2, [pc, #40]	@ (8005e18 <prvCheckTasksWaitingTermination+0x58>)
 8005df0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005df2:	f000 fdc3 	bl	800697c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f810 	bl	8005e1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dfc:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <prvCheckTasksWaitingTermination+0x58>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e1      	bne.n	8005dc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000f84 	.word	0x20000f84
 8005e14:	20000fb0 	.word	0x20000fb0
 8005e18:	20000f98 	.word	0x20000f98

08005e1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3354      	adds	r3, #84	@ 0x54
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f001 f86d 	bl	8006f08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d108      	bne.n	8005e4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 ff3d 	bl	8006cbc <vPortFree>
				vPortFree( pxTCB );
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 ff3a 	bl	8006cbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e48:	e019      	b.n	8005e7e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d103      	bne.n	8005e5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 ff31 	bl	8006cbc <vPortFree>
	}
 8005e5a:	e010      	b.n	8005e7e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d00b      	beq.n	8005e7e <prvDeleteTCB+0x62>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	60fb      	str	r3, [r7, #12]
}
 8005e78:	bf00      	nop
 8005e7a:	bf00      	nop
 8005e7c:	e7fd      	b.n	8005e7a <prvDeleteTCB+0x5e>
	}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec0 <prvResetNextTaskUnblockTime+0x38>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e98:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec4 <prvResetNextTaskUnblockTime+0x3c>)
 8005e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ea0:	e008      	b.n	8005eb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea2:	4b07      	ldr	r3, [pc, #28]	@ (8005ec0 <prvResetNextTaskUnblockTime+0x38>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4a04      	ldr	r2, [pc, #16]	@ (8005ec4 <prvResetNextTaskUnblockTime+0x3c>)
 8005eb2:	6013      	str	r3, [r2, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc80      	pop	{r7}
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	20000f68 	.word	0x20000f68
 8005ec4:	20000fd0 	.word	0x20000fd0

08005ec8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ece:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <xTaskGetSchedulerState+0x34>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	607b      	str	r3, [r7, #4]
 8005eda:	e008      	b.n	8005eee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005edc:	4b08      	ldr	r3, [pc, #32]	@ (8005f00 <xTaskGetSchedulerState+0x38>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	607b      	str	r3, [r7, #4]
 8005ee8:	e001      	b.n	8005eee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005eea:	2300      	movs	r3, #0
 8005eec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005eee:	687b      	ldr	r3, [r7, #4]
	}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bc80      	pop	{r7}
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000fbc 	.word	0x20000fbc
 8005f00:	20000fd8 	.word	0x20000fd8

08005f04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d058      	beq.n	8005fcc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005fd8 <xTaskPriorityDisinherit+0xd4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d00b      	beq.n	8005f3c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	60fb      	str	r3, [r7, #12]
}
 8005f36:	bf00      	nop
 8005f38:	bf00      	nop
 8005f3a:	e7fd      	b.n	8005f38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10b      	bne.n	8005f5c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	60bb      	str	r3, [r7, #8]
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	e7fd      	b.n	8005f58 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f60:	1e5a      	subs	r2, r3, #1
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d02c      	beq.n	8005fcc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d128      	bne.n	8005fcc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fb35 	bl	80045ee <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f90:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005fdc <xTaskPriorityDisinherit+0xd8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d903      	bls.n	8005fac <xTaskPriorityDisinherit+0xa8>
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8005fdc <xTaskPriorityDisinherit+0xd8>)
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4a09      	ldr	r2, [pc, #36]	@ (8005fe0 <xTaskPriorityDisinherit+0xdc>)
 8005fba:	441a      	add	r2, r3
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fe fab8 	bl	8004538 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fcc:	697b      	ldr	r3, [r7, #20]
	}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000adc 	.word	0x20000adc
 8005fdc:	20000fb8 	.word	0x20000fb8
 8005fe0:	20000ae0 	.word	0x20000ae0

08005fe4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fee:	4b21      	ldr	r3, [pc, #132]	@ (8006074 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ff4:	4b20      	ldr	r3, [pc, #128]	@ (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe faf7 	bl	80045ee <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d10a      	bne.n	800601e <prvAddCurrentTaskToDelayedList+0x3a>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800600e:	4b1a      	ldr	r3, [pc, #104]	@ (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3304      	adds	r3, #4
 8006014:	4619      	mov	r1, r3
 8006016:	4819      	ldr	r0, [pc, #100]	@ (800607c <prvAddCurrentTaskToDelayedList+0x98>)
 8006018:	f7fe fa8e 	bl	8004538 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800601c:	e026      	b.n	800606c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4413      	add	r3, r2
 8006024:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006026:	4b14      	ldr	r3, [pc, #80]	@ (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	429a      	cmp	r2, r3
 8006034:	d209      	bcs.n	800604a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006036:	4b12      	ldr	r3, [pc, #72]	@ (8006080 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b0f      	ldr	r3, [pc, #60]	@ (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3304      	adds	r3, #4
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f7fe fa9b 	bl	800457e <vListInsert>
}
 8006048:	e010      	b.n	800606c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800604a:	4b0e      	ldr	r3, [pc, #56]	@ (8006084 <prvAddCurrentTaskToDelayedList+0xa0>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b0a      	ldr	r3, [pc, #40]	@ (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f7fe fa91 	bl	800457e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800605c:	4b0a      	ldr	r3, [pc, #40]	@ (8006088 <prvAddCurrentTaskToDelayedList+0xa4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	d202      	bcs.n	800606c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006066:	4a08      	ldr	r2, [pc, #32]	@ (8006088 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6013      	str	r3, [r2, #0]
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000fb4 	.word	0x20000fb4
 8006078:	20000adc 	.word	0x20000adc
 800607c:	20000f9c 	.word	0x20000f9c
 8006080:	20000f6c 	.word	0x20000f6c
 8006084:	20000f68 	.word	0x20000f68
 8006088:	20000fd0 	.word	0x20000fd0

0800608c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	@ 0x28
 8006090:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006096:	f000 fb11 	bl	80066bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800609a:	4b1d      	ldr	r3, [pc, #116]	@ (8006110 <xTimerCreateTimerTask+0x84>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d021      	beq.n	80060e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060aa:	1d3a      	adds	r2, r7, #4
 80060ac:	f107 0108 	add.w	r1, r7, #8
 80060b0:	f107 030c 	add.w	r3, r7, #12
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe f9a7 	bl	8004408 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	9202      	str	r2, [sp, #8]
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	2302      	movs	r3, #2
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	2300      	movs	r3, #0
 80060ca:	460a      	mov	r2, r1
 80060cc:	4911      	ldr	r1, [pc, #68]	@ (8006114 <xTimerCreateTimerTask+0x88>)
 80060ce:	4812      	ldr	r0, [pc, #72]	@ (8006118 <xTimerCreateTimerTask+0x8c>)
 80060d0:	f7ff f8a6 	bl	8005220 <xTaskCreateStatic>
 80060d4:	4603      	mov	r3, r0
 80060d6:	4a11      	ldr	r2, [pc, #68]	@ (800611c <xTimerCreateTimerTask+0x90>)
 80060d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060da:	4b10      	ldr	r3, [pc, #64]	@ (800611c <xTimerCreateTimerTask+0x90>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060e2:	2301      	movs	r3, #1
 80060e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	613b      	str	r3, [r7, #16]
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006104:	697b      	ldr	r3, [r7, #20]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	2000100c 	.word	0x2000100c
 8006114:	08007160 	.word	0x08007160
 8006118:	08006259 	.word	0x08006259
 800611c:	20001010 	.word	0x20001010

08006120 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	@ 0x28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800612e:	2300      	movs	r3, #0
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <xTimerGenericCommand+0x30>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	623b      	str	r3, [r7, #32]
}
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	e7fd      	b.n	800614c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006150:	4b19      	ldr	r3, [pc, #100]	@ (80061b8 <xTimerGenericCommand+0x98>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d02a      	beq.n	80061ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b05      	cmp	r3, #5
 8006168:	dc18      	bgt.n	800619c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800616a:	f7ff fead 	bl	8005ec8 <xTaskGetSchedulerState>
 800616e:	4603      	mov	r3, r0
 8006170:	2b02      	cmp	r3, #2
 8006172:	d109      	bne.n	8006188 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006174:	4b10      	ldr	r3, [pc, #64]	@ (80061b8 <xTimerGenericCommand+0x98>)
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	f107 0110 	add.w	r1, r7, #16
 800617c:	2300      	movs	r3, #0
 800617e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006180:	f7fe fc12 	bl	80049a8 <xQueueGenericSend>
 8006184:	6278      	str	r0, [r7, #36]	@ 0x24
 8006186:	e012      	b.n	80061ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006188:	4b0b      	ldr	r3, [pc, #44]	@ (80061b8 <xTimerGenericCommand+0x98>)
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	f107 0110 	add.w	r1, r7, #16
 8006190:	2300      	movs	r3, #0
 8006192:	2200      	movs	r2, #0
 8006194:	f7fe fc08 	bl	80049a8 <xQueueGenericSend>
 8006198:	6278      	str	r0, [r7, #36]	@ 0x24
 800619a:	e008      	b.n	80061ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800619c:	4b06      	ldr	r3, [pc, #24]	@ (80061b8 <xTimerGenericCommand+0x98>)
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	f107 0110 	add.w	r1, r7, #16
 80061a4:	2300      	movs	r3, #0
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	f7fe fd00 	bl	8004bac <xQueueGenericSendFromISR>
 80061ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3728      	adds	r7, #40	@ 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	2000100c 	.word	0x2000100c

080061bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c6:	4b23      	ldr	r3, [pc, #140]	@ (8006254 <prvProcessExpiredTimer+0x98>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe fa0a 	bl	80045ee <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d023      	beq.n	8006230 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	18d1      	adds	r1, r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	6978      	ldr	r0, [r7, #20]
 80061f6:	f000 f8d3 	bl	80063a0 <prvInsertTimerInActiveList>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d020      	beq.n	8006242 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006200:	2300      	movs	r3, #0
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	2300      	movs	r3, #0
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	2100      	movs	r1, #0
 800620a:	6978      	ldr	r0, [r7, #20]
 800620c:	f7ff ff88 	bl	8006120 <xTimerGenericCommand>
 8006210:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d114      	bne.n	8006242 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	60fb      	str	r3, [r7, #12]
}
 800622a:	bf00      	nop
 800622c:	bf00      	nop
 800622e:	e7fd      	b.n	800622c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006236:	f023 0301 	bic.w	r3, r3, #1
 800623a:	b2da      	uxtb	r2, r3
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	6978      	ldr	r0, [r7, #20]
 8006248:	4798      	blx	r3
}
 800624a:	bf00      	nop
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20001004 	.word	0x20001004

08006258 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006260:	f107 0308 	add.w	r3, r7, #8
 8006264:	4618      	mov	r0, r3
 8006266:	f000 f859 	bl	800631c <prvGetNextExpireTime>
 800626a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4619      	mov	r1, r3
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f805 	bl	8006280 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006276:	f000 f8d5 	bl	8006424 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800627a:	bf00      	nop
 800627c:	e7f0      	b.n	8006260 <prvTimerTask+0x8>
	...

08006280 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800628a:	f7ff fa2d 	bl	80056e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	4618      	mov	r0, r3
 8006294:	f000 f864 	bl	8006360 <prvSampleTimeNow>
 8006298:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d130      	bne.n	8006302 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <prvProcessTimerOrBlockTask+0x3c>
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d806      	bhi.n	80062bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062ae:	f7ff fa29 	bl	8005704 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062b2:	68f9      	ldr	r1, [r7, #12]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff ff81 	bl	80061bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062ba:	e024      	b.n	8006306 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062c2:	4b13      	ldr	r3, [pc, #76]	@ (8006310 <prvProcessTimerOrBlockTask+0x90>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <prvProcessTimerOrBlockTask+0x50>
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <prvProcessTimerOrBlockTask+0x52>
 80062d0:	2300      	movs	r3, #0
 80062d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006314 <prvProcessTimerOrBlockTask+0x94>)
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	4619      	mov	r1, r3
 80062e2:	f7fe ff69 	bl	80051b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062e6:	f7ff fa0d 	bl	8005704 <xTaskResumeAll>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062f0:	4b09      	ldr	r3, [pc, #36]	@ (8006318 <prvProcessTimerOrBlockTask+0x98>)
 80062f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	f3bf 8f6f 	isb	sy
}
 8006300:	e001      	b.n	8006306 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006302:	f7ff f9ff 	bl	8005704 <xTaskResumeAll>
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20001008 	.word	0x20001008
 8006314:	2000100c 	.word	0x2000100c
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006324:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <prvGetNextExpireTime+0x40>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <prvGetNextExpireTime+0x16>
 800632e:	2201      	movs	r2, #1
 8006330:	e000      	b.n	8006334 <prvGetNextExpireTime+0x18>
 8006332:	2200      	movs	r2, #0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d105      	bne.n	800634c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006340:	4b06      	ldr	r3, [pc, #24]	@ (800635c <prvGetNextExpireTime+0x40>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e001      	b.n	8006350 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006350:	68fb      	ldr	r3, [r7, #12]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr
 800635c:	20001004 	.word	0x20001004

08006360 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006368:	f7ff fa6a 	bl	8005840 <xTaskGetTickCount>
 800636c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800636e:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <prvSampleTimeNow+0x3c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	429a      	cmp	r2, r3
 8006376:	d205      	bcs.n	8006384 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006378:	f000 f93a 	bl	80065f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e002      	b.n	800638a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800638a:	4a04      	ldr	r2, [pc, #16]	@ (800639c <prvSampleTimeNow+0x3c>)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006390:	68fb      	ldr	r3, [r7, #12]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20001014 	.word	0x20001014

080063a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d812      	bhi.n	80063ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	1ad2      	subs	r2, r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063d4:	2301      	movs	r3, #1
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	e01b      	b.n	8006412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063da:	4b10      	ldr	r3, [pc, #64]	@ (800641c <prvInsertTimerInActiveList+0x7c>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f7fe f8ca 	bl	800457e <vListInsert>
 80063ea:	e012      	b.n	8006412 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d206      	bcs.n	8006402 <prvInsertTimerInActiveList+0x62>
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d302      	bcc.n	8006402 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063fc:	2301      	movs	r3, #1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e007      	b.n	8006412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006402:	4b07      	ldr	r3, [pc, #28]	@ (8006420 <prvInsertTimerInActiveList+0x80>)
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3304      	adds	r3, #4
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f7fe f8b6 	bl	800457e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006412:	697b      	ldr	r3, [r7, #20]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20001008 	.word	0x20001008
 8006420:	20001004 	.word	0x20001004

08006424 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08e      	sub	sp, #56	@ 0x38
 8006428:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800642a:	e0ce      	b.n	80065ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	da19      	bge.n	8006466 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006432:	1d3b      	adds	r3, r7, #4
 8006434:	3304      	adds	r3, #4
 8006436:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10b      	bne.n	8006456 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	61fb      	str	r3, [r7, #28]
}
 8006450:	bf00      	nop
 8006452:	bf00      	nop
 8006454:	e7fd      	b.n	8006452 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800645c:	6850      	ldr	r0, [r2, #4]
 800645e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006460:	6892      	ldr	r2, [r2, #8]
 8006462:	4611      	mov	r1, r2
 8006464:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	f2c0 80ae 	blt.w	80065ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d004      	beq.n	8006484 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800647a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647c:	3304      	adds	r3, #4
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe f8b5 	bl	80045ee <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006484:	463b      	mov	r3, r7
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff ff6a 	bl	8006360 <prvSampleTimeNow>
 800648c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b09      	cmp	r3, #9
 8006492:	f200 8097 	bhi.w	80065c4 <prvProcessReceivedCommands+0x1a0>
 8006496:	a201      	add	r2, pc, #4	@ (adr r2, 800649c <prvProcessReceivedCommands+0x78>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064c5 	.word	0x080064c5
 80064a4:	080064c5 	.word	0x080064c5
 80064a8:	0800653b 	.word	0x0800653b
 80064ac:	0800654f 	.word	0x0800654f
 80064b0:	0800659b 	.word	0x0800659b
 80064b4:	080064c5 	.word	0x080064c5
 80064b8:	080064c5 	.word	0x080064c5
 80064bc:	0800653b 	.word	0x0800653b
 80064c0:	0800654f 	.word	0x0800654f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064ca:	f043 0301 	orr.w	r3, r3, #1
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	18d1      	adds	r1, r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e4:	f7ff ff5c 	bl	80063a0 <prvInsertTimerInActiveList>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d06c      	beq.n	80065c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d061      	beq.n	80065c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	441a      	add	r2, r3
 800650c:	2300      	movs	r3, #0
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	2300      	movs	r3, #0
 8006512:	2100      	movs	r1, #0
 8006514:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006516:	f7ff fe03 	bl	8006120 <xTimerGenericCommand>
 800651a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d152      	bne.n	80065c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	61bb      	str	r3, [r7, #24]
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop
 8006538:	e7fd      	b.n	8006536 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800653a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006540:	f023 0301 	bic.w	r3, r3, #1
 8006544:	b2da      	uxtb	r2, r3
 8006546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006548:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800654c:	e03d      	b.n	80065ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006554:	f043 0301 	orr.w	r3, r3, #1
 8006558:	b2da      	uxtb	r2, r3
 800655a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006564:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10b      	bne.n	8006586 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	617b      	str	r3, [r7, #20]
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	e7fd      	b.n	8006582 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	18d1      	adds	r1, r2, r3
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006594:	f7ff ff04 	bl	80063a0 <prvInsertTimerInActiveList>
					break;
 8006598:	e017      	b.n	80065ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800659a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80065a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065aa:	f000 fb87 	bl	8006cbc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065ae:	e00c      	b.n	80065ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065b6:	f023 0301 	bic.w	r3, r3, #1
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80065c2:	e002      	b.n	80065ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80065c4:	bf00      	nop
 80065c6:	e000      	b.n	80065ca <prvProcessReceivedCommands+0x1a6>
					break;
 80065c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065ca:	4b08      	ldr	r3, [pc, #32]	@ (80065ec <prvProcessReceivedCommands+0x1c8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	1d39      	adds	r1, r7, #4
 80065d0:	2200      	movs	r2, #0
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fb88 	bl	8004ce8 <xQueueReceive>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f47f af26 	bne.w	800642c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	3730      	adds	r7, #48	@ 0x30
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	2000100c 	.word	0x2000100c

080065f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065f6:	e049      	b.n	800668c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065f8:	4b2e      	ldr	r3, [pc, #184]	@ (80066b4 <prvSwitchTimerLists+0xc4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006602:	4b2c      	ldr	r3, [pc, #176]	@ (80066b4 <prvSwitchTimerLists+0xc4>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3304      	adds	r3, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f7fd ffec 	bl	80045ee <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d02f      	beq.n	800668c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4413      	add	r3, r2
 8006634:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	429a      	cmp	r2, r3
 800663c:	d90e      	bls.n	800665c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800664a:	4b1a      	ldr	r3, [pc, #104]	@ (80066b4 <prvSwitchTimerLists+0xc4>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3304      	adds	r3, #4
 8006652:	4619      	mov	r1, r3
 8006654:	4610      	mov	r0, r2
 8006656:	f7fd ff92 	bl	800457e <vListInsert>
 800665a:	e017      	b.n	800668c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800665c:	2300      	movs	r3, #0
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2300      	movs	r3, #0
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	2100      	movs	r1, #0
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff fd5a 	bl	8006120 <xTimerGenericCommand>
 800666c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10b      	bne.n	800668c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	603b      	str	r3, [r7, #0]
}
 8006686:	bf00      	nop
 8006688:	bf00      	nop
 800668a:	e7fd      	b.n	8006688 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800668c:	4b09      	ldr	r3, [pc, #36]	@ (80066b4 <prvSwitchTimerLists+0xc4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1b0      	bne.n	80065f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006696:	4b07      	ldr	r3, [pc, #28]	@ (80066b4 <prvSwitchTimerLists+0xc4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <prvSwitchTimerLists+0xc8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a04      	ldr	r2, [pc, #16]	@ (80066b4 <prvSwitchTimerLists+0xc4>)
 80066a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066a4:	4a04      	ldr	r2, [pc, #16]	@ (80066b8 <prvSwitchTimerLists+0xc8>)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	6013      	str	r3, [r2, #0]
}
 80066aa:	bf00      	nop
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20001004 	.word	0x20001004
 80066b8:	20001008 	.word	0x20001008

080066bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066c2:	f000 f92b 	bl	800691c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066c6:	4b15      	ldr	r3, [pc, #84]	@ (800671c <prvCheckForValidListAndQueue+0x60>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d120      	bne.n	8006710 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066ce:	4814      	ldr	r0, [pc, #80]	@ (8006720 <prvCheckForValidListAndQueue+0x64>)
 80066d0:	f7fd ff07 	bl	80044e2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066d4:	4813      	ldr	r0, [pc, #76]	@ (8006724 <prvCheckForValidListAndQueue+0x68>)
 80066d6:	f7fd ff04 	bl	80044e2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066da:	4b13      	ldr	r3, [pc, #76]	@ (8006728 <prvCheckForValidListAndQueue+0x6c>)
 80066dc:	4a10      	ldr	r2, [pc, #64]	@ (8006720 <prvCheckForValidListAndQueue+0x64>)
 80066de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066e0:	4b12      	ldr	r3, [pc, #72]	@ (800672c <prvCheckForValidListAndQueue+0x70>)
 80066e2:	4a10      	ldr	r2, [pc, #64]	@ (8006724 <prvCheckForValidListAndQueue+0x68>)
 80066e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066e6:	2300      	movs	r3, #0
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	4b11      	ldr	r3, [pc, #68]	@ (8006730 <prvCheckForValidListAndQueue+0x74>)
 80066ec:	4a11      	ldr	r2, [pc, #68]	@ (8006734 <prvCheckForValidListAndQueue+0x78>)
 80066ee:	2110      	movs	r1, #16
 80066f0:	200a      	movs	r0, #10
 80066f2:	f7fe f80f 	bl	8004714 <xQueueGenericCreateStatic>
 80066f6:	4603      	mov	r3, r0
 80066f8:	4a08      	ldr	r2, [pc, #32]	@ (800671c <prvCheckForValidListAndQueue+0x60>)
 80066fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066fc:	4b07      	ldr	r3, [pc, #28]	@ (800671c <prvCheckForValidListAndQueue+0x60>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006704:	4b05      	ldr	r3, [pc, #20]	@ (800671c <prvCheckForValidListAndQueue+0x60>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	490b      	ldr	r1, [pc, #44]	@ (8006738 <prvCheckForValidListAndQueue+0x7c>)
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe fd02 	bl	8005114 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006710:	f000 f934 	bl	800697c <vPortExitCritical>
}
 8006714:	bf00      	nop
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	2000100c 	.word	0x2000100c
 8006720:	20000fdc 	.word	0x20000fdc
 8006724:	20000ff0 	.word	0x20000ff0
 8006728:	20001004 	.word	0x20001004
 800672c:	20001008 	.word	0x20001008
 8006730:	200010b8 	.word	0x200010b8
 8006734:	20001018 	.word	0x20001018
 8006738:	08007168 	.word	0x08007168

0800673c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3b04      	subs	r3, #4
 800674c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3b04      	subs	r3, #4
 800675a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f023 0201 	bic.w	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3b04      	subs	r3, #4
 800676a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800676c:	4a08      	ldr	r2, [pc, #32]	@ (8006790 <pxPortInitialiseStack+0x54>)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3b14      	subs	r3, #20
 8006776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3b20      	subs	r3, #32
 8006782:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006784:	68fb      	ldr	r3, [r7, #12]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr
 8006790:	08006795 	.word	0x08006795

08006794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800679a:	2300      	movs	r3, #0
 800679c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800679e:	4b12      	ldr	r3, [pc, #72]	@ (80067e8 <prvTaskExitError+0x54>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a6:	d00b      	beq.n	80067c0 <prvTaskExitError+0x2c>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	60fb      	str	r3, [r7, #12]
}
 80067ba:	bf00      	nop
 80067bc:	bf00      	nop
 80067be:	e7fd      	b.n	80067bc <prvTaskExitError+0x28>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	60bb      	str	r3, [r7, #8]
}
 80067d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067d4:	bf00      	nop
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0fc      	beq.n	80067d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr
 80067e8:	2000000c 	.word	0x2000000c
 80067ec:	00000000 	.word	0x00000000

080067f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067f0:	4b07      	ldr	r3, [pc, #28]	@ (8006810 <pxCurrentTCBConst2>)
 80067f2:	6819      	ldr	r1, [r3, #0]
 80067f4:	6808      	ldr	r0, [r1, #0]
 80067f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80067fa:	f380 8809 	msr	PSP, r0
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	f380 8811 	msr	BASEPRI, r0
 800680a:	f04e 0e0d 	orr.w	lr, lr, #13
 800680e:	4770      	bx	lr

08006810 <pxCurrentTCBConst2>:
 8006810:	20000adc 	.word	0x20000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006818:	4806      	ldr	r0, [pc, #24]	@ (8006834 <prvPortStartFirstTask+0x1c>)
 800681a:	6800      	ldr	r0, [r0, #0]
 800681c:	6800      	ldr	r0, [r0, #0]
 800681e:	f380 8808 	msr	MSP, r0
 8006822:	b662      	cpsie	i
 8006824:	b661      	cpsie	f
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	df00      	svc	0
 8006830:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006832:	bf00      	nop
 8006834:	e000ed08 	.word	0xe000ed08

08006838 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800683e:	4b32      	ldr	r3, [pc, #200]	@ (8006908 <xPortStartScheduler+0xd0>)
 8006840:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	22ff      	movs	r2, #255	@ 0xff
 800684e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006860:	b2da      	uxtb	r2, r3
 8006862:	4b2a      	ldr	r3, [pc, #168]	@ (800690c <xPortStartScheduler+0xd4>)
 8006864:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006866:	4b2a      	ldr	r3, [pc, #168]	@ (8006910 <xPortStartScheduler+0xd8>)
 8006868:	2207      	movs	r2, #7
 800686a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800686c:	e009      	b.n	8006882 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800686e:	4b28      	ldr	r3, [pc, #160]	@ (8006910 <xPortStartScheduler+0xd8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3b01      	subs	r3, #1
 8006874:	4a26      	ldr	r2, [pc, #152]	@ (8006910 <xPortStartScheduler+0xd8>)
 8006876:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	b2db      	uxtb	r3, r3
 8006880:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800688a:	2b80      	cmp	r3, #128	@ 0x80
 800688c:	d0ef      	beq.n	800686e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800688e:	4b20      	ldr	r3, [pc, #128]	@ (8006910 <xPortStartScheduler+0xd8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f1c3 0307 	rsb	r3, r3, #7
 8006896:	2b04      	cmp	r3, #4
 8006898:	d00b      	beq.n	80068b2 <xPortStartScheduler+0x7a>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	60bb      	str	r3, [r7, #8]
}
 80068ac:	bf00      	nop
 80068ae:	bf00      	nop
 80068b0:	e7fd      	b.n	80068ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068b2:	4b17      	ldr	r3, [pc, #92]	@ (8006910 <xPortStartScheduler+0xd8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	4a15      	ldr	r2, [pc, #84]	@ (8006910 <xPortStartScheduler+0xd8>)
 80068ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068bc:	4b14      	ldr	r3, [pc, #80]	@ (8006910 <xPortStartScheduler+0xd8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068c4:	4a12      	ldr	r2, [pc, #72]	@ (8006910 <xPortStartScheduler+0xd8>)
 80068c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068d0:	4b10      	ldr	r3, [pc, #64]	@ (8006914 <xPortStartScheduler+0xdc>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a0f      	ldr	r2, [pc, #60]	@ (8006914 <xPortStartScheduler+0xdc>)
 80068d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80068da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006914 <xPortStartScheduler+0xdc>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006914 <xPortStartScheduler+0xdc>)
 80068e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80068e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068e8:	f000 f8b8 	bl	8006a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006918 <xPortStartScheduler+0xe0>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068f2:	f7ff ff91 	bl	8006818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068f6:	f7ff f86b 	bl	80059d0 <vTaskSwitchContext>
	prvTaskExitError();
 80068fa:	f7ff ff4b 	bl	8006794 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	e000e400 	.word	0xe000e400
 800690c:	20001108 	.word	0x20001108
 8006910:	2000110c 	.word	0x2000110c
 8006914:	e000ed20 	.word	0xe000ed20
 8006918:	2000000c 	.word	0x2000000c

0800691c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	607b      	str	r3, [r7, #4]
}
 8006934:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006936:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <vPortEnterCritical+0x58>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3301      	adds	r3, #1
 800693c:	4a0d      	ldr	r2, [pc, #52]	@ (8006974 <vPortEnterCritical+0x58>)
 800693e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006940:	4b0c      	ldr	r3, [pc, #48]	@ (8006974 <vPortEnterCritical+0x58>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d110      	bne.n	800696a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006948:	4b0b      	ldr	r3, [pc, #44]	@ (8006978 <vPortEnterCritical+0x5c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00b      	beq.n	800696a <vPortEnterCritical+0x4e>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	603b      	str	r3, [r7, #0]
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop
 8006968:	e7fd      	b.n	8006966 <vPortEnterCritical+0x4a>
	}
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	bc80      	pop	{r7}
 8006972:	4770      	bx	lr
 8006974:	2000000c 	.word	0x2000000c
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006982:	4b12      	ldr	r3, [pc, #72]	@ (80069cc <vPortExitCritical+0x50>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10b      	bne.n	80069a2 <vPortExitCritical+0x26>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	607b      	str	r3, [r7, #4]
}
 800699c:	bf00      	nop
 800699e:	bf00      	nop
 80069a0:	e7fd      	b.n	800699e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069a2:	4b0a      	ldr	r3, [pc, #40]	@ (80069cc <vPortExitCritical+0x50>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	4a08      	ldr	r2, [pc, #32]	@ (80069cc <vPortExitCritical+0x50>)
 80069aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069ac:	4b07      	ldr	r3, [pc, #28]	@ (80069cc <vPortExitCritical+0x50>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <vPortExitCritical+0x44>
 80069b4:	2300      	movs	r3, #0
 80069b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f383 8811 	msr	BASEPRI, r3
}
 80069be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	2000000c 	.word	0x2000000c

080069d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069d0:	f3ef 8009 	mrs	r0, PSP
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <pxCurrentTCBConst>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80069e0:	6010      	str	r0, [r2, #0]
 80069e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80069e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80069ea:	f380 8811 	msr	BASEPRI, r0
 80069ee:	f7fe ffef 	bl	80059d0 <vTaskSwitchContext>
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8811 	msr	BASEPRI, r0
 80069fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80069fe:	6819      	ldr	r1, [r3, #0]
 8006a00:	6808      	ldr	r0, [r1, #0]
 8006a02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a06:	f380 8809 	msr	PSP, r0
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	4770      	bx	lr

08006a10 <pxCurrentTCBConst>:
 8006a10:	20000adc 	.word	0x20000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop

08006a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	607b      	str	r3, [r7, #4]
}
 8006a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a32:	f7fe ff13 	bl	800585c <xTaskIncrementTick>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a3c:	4b06      	ldr	r3, [pc, #24]	@ (8006a58 <xPortSysTickHandler+0x40>)
 8006a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	2300      	movs	r3, #0
 8006a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f383 8811 	msr	BASEPRI, r3
}
 8006a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	e000ed04 	.word	0xe000ed04

08006a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a60:	4b0a      	ldr	r3, [pc, #40]	@ (8006a8c <vPortSetupTimerInterrupt+0x30>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a66:	4b0a      	ldr	r3, [pc, #40]	@ (8006a90 <vPortSetupTimerInterrupt+0x34>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a6c:	4b09      	ldr	r3, [pc, #36]	@ (8006a94 <vPortSetupTimerInterrupt+0x38>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a09      	ldr	r2, [pc, #36]	@ (8006a98 <vPortSetupTimerInterrupt+0x3c>)
 8006a72:	fba2 2303 	umull	r2, r3, r2, r3
 8006a76:	099b      	lsrs	r3, r3, #6
 8006a78:	4a08      	ldr	r2, [pc, #32]	@ (8006a9c <vPortSetupTimerInterrupt+0x40>)
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a7e:	4b03      	ldr	r3, [pc, #12]	@ (8006a8c <vPortSetupTimerInterrupt+0x30>)
 8006a80:	2207      	movs	r2, #7
 8006a82:	601a      	str	r2, [r3, #0]
}
 8006a84:	bf00      	nop
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr
 8006a8c:	e000e010 	.word	0xe000e010
 8006a90:	e000e018 	.word	0xe000e018
 8006a94:	20000000 	.word	0x20000000
 8006a98:	10624dd3 	.word	0x10624dd3
 8006a9c:	e000e014 	.word	0xe000e014

08006aa0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006aa6:	f3ef 8305 	mrs	r3, IPSR
 8006aaa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b0f      	cmp	r3, #15
 8006ab0:	d915      	bls.n	8006ade <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ab2:	4a17      	ldr	r2, [pc, #92]	@ (8006b10 <vPortValidateInterruptPriority+0x70>)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006abc:	4b15      	ldr	r3, [pc, #84]	@ (8006b14 <vPortValidateInterruptPriority+0x74>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	7afa      	ldrb	r2, [r7, #11]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d20b      	bcs.n	8006ade <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	607b      	str	r3, [r7, #4]
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	e7fd      	b.n	8006ada <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ade:	4b0e      	ldr	r3, [pc, #56]	@ (8006b18 <vPortValidateInterruptPriority+0x78>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b1c <vPortValidateInterruptPriority+0x7c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d90b      	bls.n	8006b06 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	603b      	str	r3, [r7, #0]
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	e7fd      	b.n	8006b02 <vPortValidateInterruptPriority+0x62>
	}
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr
 8006b10:	e000e3f0 	.word	0xe000e3f0
 8006b14:	20001108 	.word	0x20001108
 8006b18:	e000ed0c 	.word	0xe000ed0c
 8006b1c:	2000110c 	.word	0x2000110c

08006b20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08a      	sub	sp, #40	@ 0x28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b2c:	f7fe fddc 	bl	80056e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b30:	4b5c      	ldr	r3, [pc, #368]	@ (8006ca4 <pvPortMalloc+0x184>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b38:	f000 f924 	bl	8006d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b3c:	4b5a      	ldr	r3, [pc, #360]	@ (8006ca8 <pvPortMalloc+0x188>)
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4013      	ands	r3, r2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f040 8095 	bne.w	8006c74 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01e      	beq.n	8006b8e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006b50:	2208      	movs	r2, #8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4413      	add	r3, r2
 8006b56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d015      	beq.n	8006b8e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f023 0307 	bic.w	r3, r3, #7
 8006b68:	3308      	adds	r3, #8
 8006b6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <pvPortMalloc+0x6e>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	617b      	str	r3, [r7, #20]
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	e7fd      	b.n	8006b8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d06f      	beq.n	8006c74 <pvPortMalloc+0x154>
 8006b94:	4b45      	ldr	r3, [pc, #276]	@ (8006cac <pvPortMalloc+0x18c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d86a      	bhi.n	8006c74 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b9e:	4b44      	ldr	r3, [pc, #272]	@ (8006cb0 <pvPortMalloc+0x190>)
 8006ba0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ba2:	4b43      	ldr	r3, [pc, #268]	@ (8006cb0 <pvPortMalloc+0x190>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ba8:	e004      	b.n	8006bb4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d903      	bls.n	8006bc6 <pvPortMalloc+0xa6>
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f1      	bne.n	8006baa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bc6:	4b37      	ldr	r3, [pc, #220]	@ (8006ca4 <pvPortMalloc+0x184>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d051      	beq.n	8006c74 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	4413      	add	r3, r2
 8006bd8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	1ad2      	subs	r2, r2, r3
 8006bea:	2308      	movs	r3, #8
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d920      	bls.n	8006c34 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <pvPortMalloc+0xfc>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	613b      	str	r3, [r7, #16]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	1ad2      	subs	r2, r2, r3
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c2e:	69b8      	ldr	r0, [r7, #24]
 8006c30:	f000 f90a 	bl	8006e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c34:	4b1d      	ldr	r3, [pc, #116]	@ (8006cac <pvPortMalloc+0x18c>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8006cac <pvPortMalloc+0x18c>)
 8006c40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c42:	4b1a      	ldr	r3, [pc, #104]	@ (8006cac <pvPortMalloc+0x18c>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4b1b      	ldr	r3, [pc, #108]	@ (8006cb4 <pvPortMalloc+0x194>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d203      	bcs.n	8006c56 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c4e:	4b17      	ldr	r3, [pc, #92]	@ (8006cac <pvPortMalloc+0x18c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a18      	ldr	r2, [pc, #96]	@ (8006cb4 <pvPortMalloc+0x194>)
 8006c54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	4b13      	ldr	r3, [pc, #76]	@ (8006ca8 <pvPortMalloc+0x188>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c6a:	4b13      	ldr	r3, [pc, #76]	@ (8006cb8 <pvPortMalloc+0x198>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	4a11      	ldr	r2, [pc, #68]	@ (8006cb8 <pvPortMalloc+0x198>)
 8006c72:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c74:	f7fe fd46 	bl	8005704 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <pvPortMalloc+0x17a>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	60fb      	str	r3, [r7, #12]
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	e7fd      	b.n	8006c96 <pvPortMalloc+0x176>
	return pvReturn;
 8006c9a:	69fb      	ldr	r3, [r7, #28]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3728      	adds	r7, #40	@ 0x28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	20001d18 	.word	0x20001d18
 8006ca8:	20001d2c 	.word	0x20001d2c
 8006cac:	20001d1c 	.word	0x20001d1c
 8006cb0:	20001d10 	.word	0x20001d10
 8006cb4:	20001d20 	.word	0x20001d20
 8006cb8:	20001d24 	.word	0x20001d24

08006cbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d04f      	beq.n	8006d6e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cce:	2308      	movs	r3, #8
 8006cd0:	425b      	negs	r3, r3
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	4b25      	ldr	r3, [pc, #148]	@ (8006d78 <vPortFree+0xbc>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10b      	bne.n	8006d02 <vPortFree+0x46>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	60fb      	str	r3, [r7, #12]
}
 8006cfc:	bf00      	nop
 8006cfe:	bf00      	nop
 8006d00:	e7fd      	b.n	8006cfe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00b      	beq.n	8006d22 <vPortFree+0x66>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	60bb      	str	r3, [r7, #8]
}
 8006d1c:	bf00      	nop
 8006d1e:	bf00      	nop
 8006d20:	e7fd      	b.n	8006d1e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	4b14      	ldr	r3, [pc, #80]	@ (8006d78 <vPortFree+0xbc>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01e      	beq.n	8006d6e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d11a      	bne.n	8006d6e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d78 <vPortFree+0xbc>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	43db      	mvns	r3, r3
 8006d42:	401a      	ands	r2, r3
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d48:	f7fe fcce 	bl	80056e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	4b0a      	ldr	r3, [pc, #40]	@ (8006d7c <vPortFree+0xc0>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4413      	add	r3, r2
 8006d56:	4a09      	ldr	r2, [pc, #36]	@ (8006d7c <vPortFree+0xc0>)
 8006d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d5a:	6938      	ldr	r0, [r7, #16]
 8006d5c:	f000 f874 	bl	8006e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d60:	4b07      	ldr	r3, [pc, #28]	@ (8006d80 <vPortFree+0xc4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3301      	adds	r3, #1
 8006d66:	4a06      	ldr	r2, [pc, #24]	@ (8006d80 <vPortFree+0xc4>)
 8006d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d6a:	f7fe fccb 	bl	8005704 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d6e:	bf00      	nop
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20001d2c 	.word	0x20001d2c
 8006d7c:	20001d1c 	.word	0x20001d1c
 8006d80:	20001d28 	.word	0x20001d28

08006d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d90:	4b27      	ldr	r3, [pc, #156]	@ (8006e30 <prvHeapInit+0xac>)
 8006d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00c      	beq.n	8006db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3307      	adds	r3, #7
 8006da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0307 	bic.w	r3, r3, #7
 8006daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	4a1f      	ldr	r2, [pc, #124]	@ (8006e30 <prvHeapInit+0xac>)
 8006db4:	4413      	add	r3, r2
 8006db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8006e34 <prvHeapInit+0xb0>)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8006e34 <prvHeapInit+0xb0>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	4413      	add	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0307 	bic.w	r3, r3, #7
 8006dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4a15      	ldr	r2, [pc, #84]	@ (8006e38 <prvHeapInit+0xb4>)
 8006de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006de6:	4b14      	ldr	r3, [pc, #80]	@ (8006e38 <prvHeapInit+0xb4>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2200      	movs	r2, #0
 8006dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dee:	4b12      	ldr	r3, [pc, #72]	@ (8006e38 <prvHeapInit+0xb4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	1ad2      	subs	r2, r2, r3
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e04:	4b0c      	ldr	r3, [pc, #48]	@ (8006e38 <prvHeapInit+0xb4>)
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	4a0a      	ldr	r2, [pc, #40]	@ (8006e3c <prvHeapInit+0xb8>)
 8006e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	4a09      	ldr	r2, [pc, #36]	@ (8006e40 <prvHeapInit+0xbc>)
 8006e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e1c:	4b09      	ldr	r3, [pc, #36]	@ (8006e44 <prvHeapInit+0xc0>)
 8006e1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e22:	601a      	str	r2, [r3, #0]
}
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bc80      	pop	{r7}
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20001110 	.word	0x20001110
 8006e34:	20001d10 	.word	0x20001d10
 8006e38:	20001d18 	.word	0x20001d18
 8006e3c:	20001d20 	.word	0x20001d20
 8006e40:	20001d1c 	.word	0x20001d1c
 8006e44:	20001d2c 	.word	0x20001d2c

08006e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e50:	4b27      	ldr	r3, [pc, #156]	@ (8006ef0 <prvInsertBlockIntoFreeList+0xa8>)
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e002      	b.n	8006e5c <prvInsertBlockIntoFreeList+0x14>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d8f7      	bhi.n	8006e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	4413      	add	r3, r2
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d108      	bne.n	8006e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	441a      	add	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	441a      	add	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d118      	bne.n	8006ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b14      	ldr	r3, [pc, #80]	@ (8006ef4 <prvInsertBlockIntoFreeList+0xac>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d00d      	beq.n	8006ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	441a      	add	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	e008      	b.n	8006ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef4 <prvInsertBlockIntoFreeList+0xac>)
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	e003      	b.n	8006ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d002      	beq.n	8006ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ee6:	bf00      	nop
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bc80      	pop	{r7}
 8006eee:	4770      	bx	lr
 8006ef0:	20001d10 	.word	0x20001d10
 8006ef4:	20001d18 	.word	0x20001d18

08006ef8 <memset>:
 8006ef8:	4603      	mov	r3, r0
 8006efa:	4402      	add	r2, r0
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d100      	bne.n	8006f02 <memset+0xa>
 8006f00:	4770      	bx	lr
 8006f02:	f803 1b01 	strb.w	r1, [r3], #1
 8006f06:	e7f9      	b.n	8006efc <memset+0x4>

08006f08 <_reclaim_reent>:
 8006f08:	4b2d      	ldr	r3, [pc, #180]	@ (8006fc0 <_reclaim_reent+0xb8>)
 8006f0a:	b570      	push	{r4, r5, r6, lr}
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4283      	cmp	r3, r0
 8006f12:	d053      	beq.n	8006fbc <_reclaim_reent+0xb4>
 8006f14:	69c3      	ldr	r3, [r0, #28]
 8006f16:	b31b      	cbz	r3, 8006f60 <_reclaim_reent+0x58>
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	b163      	cbz	r3, 8006f36 <_reclaim_reent+0x2e>
 8006f1c:	2500      	movs	r5, #0
 8006f1e:	69e3      	ldr	r3, [r4, #28]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	5959      	ldr	r1, [r3, r5]
 8006f24:	b9b1      	cbnz	r1, 8006f54 <_reclaim_reent+0x4c>
 8006f26:	3504      	adds	r5, #4
 8006f28:	2d80      	cmp	r5, #128	@ 0x80
 8006f2a:	d1f8      	bne.n	8006f1e <_reclaim_reent+0x16>
 8006f2c:	69e3      	ldr	r3, [r4, #28]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	68d9      	ldr	r1, [r3, #12]
 8006f32:	f000 f87b 	bl	800702c <_free_r>
 8006f36:	69e3      	ldr	r3, [r4, #28]
 8006f38:	6819      	ldr	r1, [r3, #0]
 8006f3a:	b111      	cbz	r1, 8006f42 <_reclaim_reent+0x3a>
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 f875 	bl	800702c <_free_r>
 8006f42:	69e3      	ldr	r3, [r4, #28]
 8006f44:	689d      	ldr	r5, [r3, #8]
 8006f46:	b15d      	cbz	r5, 8006f60 <_reclaim_reent+0x58>
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	682d      	ldr	r5, [r5, #0]
 8006f4e:	f000 f86d 	bl	800702c <_free_r>
 8006f52:	e7f8      	b.n	8006f46 <_reclaim_reent+0x3e>
 8006f54:	680e      	ldr	r6, [r1, #0]
 8006f56:	4620      	mov	r0, r4
 8006f58:	f000 f868 	bl	800702c <_free_r>
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	e7e1      	b.n	8006f24 <_reclaim_reent+0x1c>
 8006f60:	6961      	ldr	r1, [r4, #20]
 8006f62:	b111      	cbz	r1, 8006f6a <_reclaim_reent+0x62>
 8006f64:	4620      	mov	r0, r4
 8006f66:	f000 f861 	bl	800702c <_free_r>
 8006f6a:	69e1      	ldr	r1, [r4, #28]
 8006f6c:	b111      	cbz	r1, 8006f74 <_reclaim_reent+0x6c>
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 f85c 	bl	800702c <_free_r>
 8006f74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006f76:	b111      	cbz	r1, 8006f7e <_reclaim_reent+0x76>
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 f857 	bl	800702c <_free_r>
 8006f7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f80:	b111      	cbz	r1, 8006f88 <_reclaim_reent+0x80>
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f852 	bl	800702c <_free_r>
 8006f88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006f8a:	b111      	cbz	r1, 8006f92 <_reclaim_reent+0x8a>
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f000 f84d 	bl	800702c <_free_r>
 8006f92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006f94:	b111      	cbz	r1, 8006f9c <_reclaim_reent+0x94>
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 f848 	bl	800702c <_free_r>
 8006f9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006f9e:	b111      	cbz	r1, 8006fa6 <_reclaim_reent+0x9e>
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 f843 	bl	800702c <_free_r>
 8006fa6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006fa8:	b111      	cbz	r1, 8006fb0 <_reclaim_reent+0xa8>
 8006faa:	4620      	mov	r0, r4
 8006fac:	f000 f83e 	bl	800702c <_free_r>
 8006fb0:	6a23      	ldr	r3, [r4, #32]
 8006fb2:	b11b      	cbz	r3, 8006fbc <_reclaim_reent+0xb4>
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fba:	4718      	bx	r3
 8006fbc:	bd70      	pop	{r4, r5, r6, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000010 	.word	0x20000010

08006fc4 <__libc_init_array>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	2600      	movs	r6, #0
 8006fc8:	4d0c      	ldr	r5, [pc, #48]	@ (8006ffc <__libc_init_array+0x38>)
 8006fca:	4c0d      	ldr	r4, [pc, #52]	@ (8007000 <__libc_init_array+0x3c>)
 8006fcc:	1b64      	subs	r4, r4, r5
 8006fce:	10a4      	asrs	r4, r4, #2
 8006fd0:	42a6      	cmp	r6, r4
 8006fd2:	d109      	bne.n	8006fe8 <__libc_init_array+0x24>
 8006fd4:	f000 f87e 	bl	80070d4 <_init>
 8006fd8:	2600      	movs	r6, #0
 8006fda:	4d0a      	ldr	r5, [pc, #40]	@ (8007004 <__libc_init_array+0x40>)
 8006fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8007008 <__libc_init_array+0x44>)
 8006fde:	1b64      	subs	r4, r4, r5
 8006fe0:	10a4      	asrs	r4, r4, #2
 8006fe2:	42a6      	cmp	r6, r4
 8006fe4:	d105      	bne.n	8006ff2 <__libc_init_array+0x2e>
 8006fe6:	bd70      	pop	{r4, r5, r6, pc}
 8006fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fec:	4798      	blx	r3
 8006fee:	3601      	adds	r6, #1
 8006ff0:	e7ee      	b.n	8006fd0 <__libc_init_array+0xc>
 8006ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff6:	4798      	blx	r3
 8006ff8:	3601      	adds	r6, #1
 8006ffa:	e7f2      	b.n	8006fe2 <__libc_init_array+0x1e>
 8006ffc:	08007270 	.word	0x08007270
 8007000:	08007270 	.word	0x08007270
 8007004:	08007270 	.word	0x08007270
 8007008:	08007274 	.word	0x08007274

0800700c <__retarget_lock_acquire_recursive>:
 800700c:	4770      	bx	lr

0800700e <__retarget_lock_release_recursive>:
 800700e:	4770      	bx	lr

08007010 <memcpy>:
 8007010:	440a      	add	r2, r1
 8007012:	4291      	cmp	r1, r2
 8007014:	f100 33ff 	add.w	r3, r0, #4294967295
 8007018:	d100      	bne.n	800701c <memcpy+0xc>
 800701a:	4770      	bx	lr
 800701c:	b510      	push	{r4, lr}
 800701e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007022:	4291      	cmp	r1, r2
 8007024:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007028:	d1f9      	bne.n	800701e <memcpy+0xe>
 800702a:	bd10      	pop	{r4, pc}

0800702c <_free_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4605      	mov	r5, r0
 8007030:	2900      	cmp	r1, #0
 8007032:	d040      	beq.n	80070b6 <_free_r+0x8a>
 8007034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007038:	1f0c      	subs	r4, r1, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	bfb8      	it	lt
 800703e:	18e4      	addlt	r4, r4, r3
 8007040:	f000 f83c 	bl	80070bc <__malloc_lock>
 8007044:	4a1c      	ldr	r2, [pc, #112]	@ (80070b8 <_free_r+0x8c>)
 8007046:	6813      	ldr	r3, [r2, #0]
 8007048:	b933      	cbnz	r3, 8007058 <_free_r+0x2c>
 800704a:	6063      	str	r3, [r4, #4]
 800704c:	6014      	str	r4, [r2, #0]
 800704e:	4628      	mov	r0, r5
 8007050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007054:	f000 b838 	b.w	80070c8 <__malloc_unlock>
 8007058:	42a3      	cmp	r3, r4
 800705a:	d908      	bls.n	800706e <_free_r+0x42>
 800705c:	6820      	ldr	r0, [r4, #0]
 800705e:	1821      	adds	r1, r4, r0
 8007060:	428b      	cmp	r3, r1
 8007062:	bf01      	itttt	eq
 8007064:	6819      	ldreq	r1, [r3, #0]
 8007066:	685b      	ldreq	r3, [r3, #4]
 8007068:	1809      	addeq	r1, r1, r0
 800706a:	6021      	streq	r1, [r4, #0]
 800706c:	e7ed      	b.n	800704a <_free_r+0x1e>
 800706e:	461a      	mov	r2, r3
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	b10b      	cbz	r3, 8007078 <_free_r+0x4c>
 8007074:	42a3      	cmp	r3, r4
 8007076:	d9fa      	bls.n	800706e <_free_r+0x42>
 8007078:	6811      	ldr	r1, [r2, #0]
 800707a:	1850      	adds	r0, r2, r1
 800707c:	42a0      	cmp	r0, r4
 800707e:	d10b      	bne.n	8007098 <_free_r+0x6c>
 8007080:	6820      	ldr	r0, [r4, #0]
 8007082:	4401      	add	r1, r0
 8007084:	1850      	adds	r0, r2, r1
 8007086:	4283      	cmp	r3, r0
 8007088:	6011      	str	r1, [r2, #0]
 800708a:	d1e0      	bne.n	800704e <_free_r+0x22>
 800708c:	6818      	ldr	r0, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	4408      	add	r0, r1
 8007092:	6010      	str	r0, [r2, #0]
 8007094:	6053      	str	r3, [r2, #4]
 8007096:	e7da      	b.n	800704e <_free_r+0x22>
 8007098:	d902      	bls.n	80070a0 <_free_r+0x74>
 800709a:	230c      	movs	r3, #12
 800709c:	602b      	str	r3, [r5, #0]
 800709e:	e7d6      	b.n	800704e <_free_r+0x22>
 80070a0:	6820      	ldr	r0, [r4, #0]
 80070a2:	1821      	adds	r1, r4, r0
 80070a4:	428b      	cmp	r3, r1
 80070a6:	bf01      	itttt	eq
 80070a8:	6819      	ldreq	r1, [r3, #0]
 80070aa:	685b      	ldreq	r3, [r3, #4]
 80070ac:	1809      	addeq	r1, r1, r0
 80070ae:	6021      	streq	r1, [r4, #0]
 80070b0:	6063      	str	r3, [r4, #4]
 80070b2:	6054      	str	r4, [r2, #4]
 80070b4:	e7cb      	b.n	800704e <_free_r+0x22>
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	20001e6c 	.word	0x20001e6c

080070bc <__malloc_lock>:
 80070bc:	4801      	ldr	r0, [pc, #4]	@ (80070c4 <__malloc_lock+0x8>)
 80070be:	f7ff bfa5 	b.w	800700c <__retarget_lock_acquire_recursive>
 80070c2:	bf00      	nop
 80070c4:	20001e68 	.word	0x20001e68

080070c8 <__malloc_unlock>:
 80070c8:	4801      	ldr	r0, [pc, #4]	@ (80070d0 <__malloc_unlock+0x8>)
 80070ca:	f7ff bfa0 	b.w	800700e <__retarget_lock_release_recursive>
 80070ce:	bf00      	nop
 80070d0:	20001e68 	.word	0x20001e68

080070d4 <_init>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	bf00      	nop
 80070d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070da:	bc08      	pop	{r3}
 80070dc:	469e      	mov	lr, r3
 80070de:	4770      	bx	lr

080070e0 <_fini>:
 80070e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e2:	bf00      	nop
 80070e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e6:	bc08      	pop	{r3}
 80070e8:	469e      	mov	lr, r3
 80070ea:	4770      	bx	lr
